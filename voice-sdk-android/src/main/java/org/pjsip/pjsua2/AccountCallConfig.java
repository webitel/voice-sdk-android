/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Account's call settings. This will be specified in AccountConfig.
 */
public class AccountCallConfig extends PersistentObject {
  private transient long swigCPtr;

  protected AccountCallConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.AccountCallConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AccountCallConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AccountCallConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Specify how to offer call hold to remote peer. Please see the<br>
   * documentation on pjsua_call_hold_type for more info.<br>
   * <br>
   * Default: PJSUA_CALL_HOLD_TYPE_DEFAULT
   */
  public void setHoldType(int value) {
    pjsua2JNI.AccountCallConfig_holdType_set(swigCPtr, this, value);
  }

  /**
   * Specify how to offer call hold to remote peer. Please see the<br>
   * documentation on pjsua_call_hold_type for more info.<br>
   * <br>
   * Default: PJSUA_CALL_HOLD_TYPE_DEFAULT
   */
  public int getHoldType() {
    return pjsua2JNI.AccountCallConfig_holdType_get(swigCPtr, this);
  }

  /**
   * Specify how support for reliable provisional response (100rel/<br>
   * PRACK) should be used for all sessions in this account. See the<br>
   * documentation of pjsua_100rel_use enumeration for more info.<br>
   * <br>
   * Default: PJSUA_100REL_NOT_USED
   */
  public void setPrackUse(int value) {
    pjsua2JNI.AccountCallConfig_prackUse_set(swigCPtr, this, value);
  }

  /**
   * Specify how support for reliable provisional response (100rel/<br>
   * PRACK) should be used for all sessions in this account. See the<br>
   * documentation of pjsua_100rel_use enumeration for more info.<br>
   * <br>
   * Default: PJSUA_100REL_NOT_USED
   */
  public int getPrackUse() {
    return pjsua2JNI.AccountCallConfig_prackUse_get(swigCPtr, this);
  }

  /**
   * Specify the usage of Session Timers for all sessions. See the<br>
   * pjsua_sip_timer_use for possible values.<br>
   * <br>
   * Default: PJSUA_SIP_TIMER_OPTIONAL
   */
  public void setTimerUse(int value) {
    pjsua2JNI.AccountCallConfig_timerUse_set(swigCPtr, this, value);
  }

  /**
   * Specify the usage of Session Timers for all sessions. See the<br>
   * pjsua_sip_timer_use for possible values.<br>
   * <br>
   * Default: PJSUA_SIP_TIMER_OPTIONAL
   */
  public int getTimerUse() {
    return pjsua2JNI.AccountCallConfig_timerUse_get(swigCPtr, this);
  }

  /**
   * Specify minimum Session Timer expiration period, in seconds.<br>
   * Must not be lower than 90. Default is 90.
   */
  public void setTimerMinSESec(long value) {
    pjsua2JNI.AccountCallConfig_timerMinSESec_set(swigCPtr, this, value);
  }

  /**
   * Specify minimum Session Timer expiration period, in seconds.<br>
   * Must not be lower than 90. Default is 90.
   */
  public long getTimerMinSESec() {
    return pjsua2JNI.AccountCallConfig_timerMinSESec_get(swigCPtr, this);
  }

  /**
   * Specify Session Timer expiration period, in seconds.<br>
   * Must not be lower than timerMinSE. Default is 1800.
   */
  public void setTimerSessExpiresSec(long value) {
    pjsua2JNI.AccountCallConfig_timerSessExpiresSec_set(swigCPtr, this, value);
  }

  /**
   * Specify Session Timer expiration period, in seconds.<br>
   * Must not be lower than timerMinSE. Default is 1800.
   */
  public long getTimerSessExpiresSec() {
    return pjsua2JNI.AccountCallConfig_timerSessExpiresSec_get(swigCPtr, this);
  }

  /**
   * Default constructor
   */
  public AccountCallConfig() {
    this(pjsua2JNI.new_AccountCallConfig(), true);
  }

  /**
   * Read this object from a container node.<br>
   * <br>
   * @param node              Container to read values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountCallConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container node.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountCallConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

}
