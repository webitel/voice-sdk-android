/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Account presence config. This will be specified in AccountConfig.
 */
public class AccountPresConfig extends PersistentObject {
  private transient long swigCPtr;

  protected AccountPresConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.AccountPresConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AccountPresConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AccountPresConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * The optional custom SIP headers to be put in the presence<br>
   * subscription request.
   */
  public void setHeaders(SipHeaderVector value) {
    pjsua2JNI.AccountPresConfig_headers_set(swigCPtr, this, SipHeaderVector.getCPtr(value), value);
  }

  /**
   * The optional custom SIP headers to be put in the presence<br>
   * subscription request.
   */
  public SipHeaderVector getHeaders() {
    long cPtr = pjsua2JNI.AccountPresConfig_headers_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SipHeaderVector(cPtr, false);
  }

  /**
   * If this flag is set, the presence information of this account will<br>
   * be PUBLISH-ed to the server where the account belongs.<br>
   * <br>
   * Default: PJ_FALSE
   */
  public void setPublishEnabled(boolean value) {
    pjsua2JNI.AccountPresConfig_publishEnabled_set(swigCPtr, this, value);
  }

  /**
   * If this flag is set, the presence information of this account will<br>
   * be PUBLISH-ed to the server where the account belongs.<br>
   * <br>
   * Default: PJ_FALSE
   */
  public boolean getPublishEnabled() {
    return pjsua2JNI.AccountPresConfig_publishEnabled_get(swigCPtr, this);
  }

  /**
   * Specify whether the client publication session should queue the<br>
   * PUBLISH request should there be another PUBLISH transaction still<br>
   * pending. If this is set to false, the client will return error<br>
   * on the PUBLISH request if there is another PUBLISH transaction still<br>
   * in progress.<br>
   * <br>
   * Default: PJSIP_PUBLISHC_QUEUE_REQUEST (TRUE)
   */
  public void setPublishQueue(boolean value) {
    pjsua2JNI.AccountPresConfig_publishQueue_set(swigCPtr, this, value);
  }

  /**
   * Specify whether the client publication session should queue the<br>
   * PUBLISH request should there be another PUBLISH transaction still<br>
   * pending. If this is set to false, the client will return error<br>
   * on the PUBLISH request if there is another PUBLISH transaction still<br>
   * in progress.<br>
   * <br>
   * Default: PJSIP_PUBLISHC_QUEUE_REQUEST (TRUE)
   */
  public boolean getPublishQueue() {
    return pjsua2JNI.AccountPresConfig_publishQueue_get(swigCPtr, this);
  }

  /**
   * Maximum time to wait for unpublication transaction(s) to complete<br>
   * during shutdown process, before sending unregistration. The library<br>
   * tries to wait for the unpublication (un-PUBLISH) to complete before<br>
   * sending REGISTER request to unregister the account, during library<br>
   * shutdown process. If the value is set too short, it is possible that<br>
   * the unregistration is sent before unpublication completes, causing<br>
   * unpublication request to fail.<br>
   * <br>
   * Value is in milliseconds.<br>
   * <br>
   * Default: PJSUA_UNPUBLISH_MAX_WAIT_TIME_MSEC (2000)
   */
  public void setPublishShutdownWaitMsec(long value) {
    pjsua2JNI.AccountPresConfig_publishShutdownWaitMsec_set(swigCPtr, this, value);
  }

  /**
   * Maximum time to wait for unpublication transaction(s) to complete<br>
   * during shutdown process, before sending unregistration. The library<br>
   * tries to wait for the unpublication (un-PUBLISH) to complete before<br>
   * sending REGISTER request to unregister the account, during library<br>
   * shutdown process. If the value is set too short, it is possible that<br>
   * the unregistration is sent before unpublication completes, causing<br>
   * unpublication request to fail.<br>
   * <br>
   * Value is in milliseconds.<br>
   * <br>
   * Default: PJSUA_UNPUBLISH_MAX_WAIT_TIME_MSEC (2000)
   */
  public long getPublishShutdownWaitMsec() {
    return pjsua2JNI.AccountPresConfig_publishShutdownWaitMsec_get(swigCPtr, this);
  }

  /**
   * Optional PIDF tuple ID for outgoing PUBLISH and NOTIFY. If this value<br>
   * is not specified, a random string will be used.
   */
  public void setPidfTupleId(String value) {
    pjsua2JNI.AccountPresConfig_pidfTupleId_set(swigCPtr, this, value);
  }

  /**
   * Optional PIDF tuple ID for outgoing PUBLISH and NOTIFY. If this value<br>
   * is not specified, a random string will be used.
   */
  public String getPidfTupleId() {
    return pjsua2JNI.AccountPresConfig_pidfTupleId_get(swigCPtr, this);
  }

  /**
   * Read this object from a container node.<br>
   * <br>
   * @param node              Container to read values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountPresConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container node.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountPresConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  public AccountPresConfig() {
    this(pjsua2JNI.new_AccountPresConfig(), true);
  }

}
