/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Account registration config. This will be specified in AccountConfig.
 */
public class AccountRegConfig extends PersistentObject {
  private transient long swigCPtr;

  protected AccountRegConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.AccountRegConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AccountRegConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AccountRegConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * This is the URL to be put in the request URI for the registration,<br>
   * and will look something like "sip:serviceprovider".<br>
   * <br>
   * This field should be specified if registration is desired. If the<br>
   * value is empty, no account registration will be performed.
   */
  public void setRegistrarUri(String value) {
    pjsua2JNI.AccountRegConfig_registrarUri_set(swigCPtr, this, value);
  }

  /**
   * This is the URL to be put in the request URI for the registration,<br>
   * and will look something like "sip:serviceprovider".<br>
   * <br>
   * This field should be specified if registration is desired. If the<br>
   * value is empty, no account registration will be performed.
   */
  public String getRegistrarUri() {
    return pjsua2JNI.AccountRegConfig_registrarUri_get(swigCPtr, this);
  }

  /**
   * Specify whether the account should register as soon as it is<br>
   * added to the UA. Application can set this to PJ_FALSE and control<br>
   * the registration manually with pjsua_acc_set_registration().<br>
   * <br>
   * Default: True
   */
  public void setRegisterOnAdd(boolean value) {
    pjsua2JNI.AccountRegConfig_registerOnAdd_set(swigCPtr, this, value);
  }

  /**
   * Specify whether the account should register as soon as it is<br>
   * added to the UA. Application can set this to PJ_FALSE and control<br>
   * the registration manually with pjsua_acc_set_registration().<br>
   * <br>
   * Default: True
   */
  public boolean getRegisterOnAdd() {
    return pjsua2JNI.AccountRegConfig_registerOnAdd_get(swigCPtr, this);
  }

  /**
   * Specify whether account modification with Account::modify() should<br>
   * automatically update registration if necessary, for example if<br>
   * account credentials change.<br>
   * <br>
   * Disable this when immediate registration is not desirable, such as<br>
   * during IP address change.<br>
   * <br>
   * Default: false.
   */
  public void setDisableRegOnModify(boolean value) {
    pjsua2JNI.AccountRegConfig_disableRegOnModify_set(swigCPtr, this, value);
  }

  /**
   * Specify whether account modification with Account::modify() should<br>
   * automatically update registration if necessary, for example if<br>
   * account credentials change.<br>
   * <br>
   * Disable this when immediate registration is not desirable, such as<br>
   * during IP address change.<br>
   * <br>
   * Default: false.
   */
  public boolean getDisableRegOnModify() {
    return pjsua2JNI.AccountRegConfig_disableRegOnModify_get(swigCPtr, this);
  }

  /**
   * The optional custom SIP headers to be put in the registration<br>
   * request.
   */
  public void setHeaders(SipHeaderVector value) {
    pjsua2JNI.AccountRegConfig_headers_set(swigCPtr, this, SipHeaderVector.getCPtr(value), value);
  }

  /**
   * The optional custom SIP headers to be put in the registration<br>
   * request.
   */
  public SipHeaderVector getHeaders() {
    long cPtr = pjsua2JNI.AccountRegConfig_headers_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SipHeaderVector(cPtr, false);
  }

  /**
   * Additional parameters that will be appended in the Contact header<br>
   * of the registration requests. This will be appended after<br>
   * <i>AccountSipConfig.contactParams;</i><br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public void setContactParams(String value) {
    pjsua2JNI.AccountRegConfig_contactParams_set(swigCPtr, this, value);
  }

  /**
   * Additional parameters that will be appended in the Contact header<br>
   * of the registration requests. This will be appended after<br>
   * <i>AccountSipConfig.contactParams;</i><br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public String getContactParams() {
    return pjsua2JNI.AccountRegConfig_contactParams_get(swigCPtr, this);
  }

  /**
   * Additional parameters that will be appended in the Contact URI<br>
   * of the registration requests. This will be appended after<br>
   * <i>AccountSipConfig.contactUriParams;</i><br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public void setContactUriParams(String value) {
    pjsua2JNI.AccountRegConfig_contactUriParams_set(swigCPtr, this, value);
  }

  /**
   * Additional parameters that will be appended in the Contact URI<br>
   * of the registration requests. This will be appended after<br>
   * <i>AccountSipConfig.contactUriParams;</i><br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public String getContactUriParams() {
    return pjsua2JNI.AccountRegConfig_contactUriParams_get(swigCPtr, this);
  }

  /**
   * Optional interval for registration, in seconds. If the value is zero,<br>
   * default interval will be used (PJSUA_REG_INTERVAL, 300 seconds).
   */
  public void setTimeoutSec(long value) {
    pjsua2JNI.AccountRegConfig_timeoutSec_set(swigCPtr, this, value);
  }

  /**
   * Optional interval for registration, in seconds. If the value is zero,<br>
   * default interval will be used (PJSUA_REG_INTERVAL, 300 seconds).
   */
  public long getTimeoutSec() {
    return pjsua2JNI.AccountRegConfig_timeoutSec_get(swigCPtr, this);
  }

  /**
   * Specify interval of auto registration retry upon registration failure<br>
   * (including caused by transport problem), in second. Set to 0 to<br>
   * disable auto re-registration. Note that if the registration retry<br>
   * occurs because of transport failure, the first retry will be done<br>
   * after <i>firstRetryIntervalSec</i> seconds instead. Also note that<br>
   * the interval will be randomized slightly by some seconds (specified<br>
   * in <i>reg_retry_random_interval)</i> to avoid all clients re-registering<br>
   * at the same time.<br>
   * <br>
   * See also <i>firstRetryIntervalSec</i> and <i>randomRetryIntervalSec</i><br>
   * settings.<br>
   * <br>
   * Default: PJSUA_REG_RETRY_INTERVAL
   */
  public void setRetryIntervalSec(long value) {
    pjsua2JNI.AccountRegConfig_retryIntervalSec_set(swigCPtr, this, value);
  }

  /**
   * Specify interval of auto registration retry upon registration failure<br>
   * (including caused by transport problem), in second. Set to 0 to<br>
   * disable auto re-registration. Note that if the registration retry<br>
   * occurs because of transport failure, the first retry will be done<br>
   * after <i>firstRetryIntervalSec</i> seconds instead. Also note that<br>
   * the interval will be randomized slightly by some seconds (specified<br>
   * in <i>reg_retry_random_interval)</i> to avoid all clients re-registering<br>
   * at the same time.<br>
   * <br>
   * See also <i>firstRetryIntervalSec</i> and <i>randomRetryIntervalSec</i><br>
   * settings.<br>
   * <br>
   * Default: PJSUA_REG_RETRY_INTERVAL
   */
  public long getRetryIntervalSec() {
    return pjsua2JNI.AccountRegConfig_retryIntervalSec_get(swigCPtr, this);
  }

  /**
   * This specifies the interval for the first registration retry. The<br>
   * registration retry is explained in <i>retryIntervalSec</i>. Note that<br>
   * the value here will also be randomized by some seconds (specified<br>
   * in <i>reg_retry_random_interval)</i> to avoid all clients re-registering<br>
   * at the same time.<br>
   * <br>
   * See also <i>retryIntervalSec</i> and <i>randomRetryIntervalSec</i> settings.<br>
   * <br>
   * Default: 0
   */
  public void setFirstRetryIntervalSec(long value) {
    pjsua2JNI.AccountRegConfig_firstRetryIntervalSec_set(swigCPtr, this, value);
  }

  /**
   * This specifies the interval for the first registration retry. The<br>
   * registration retry is explained in <i>retryIntervalSec</i>. Note that<br>
   * the value here will also be randomized by some seconds (specified<br>
   * in <i>reg_retry_random_interval)</i> to avoid all clients re-registering<br>
   * at the same time.<br>
   * <br>
   * See also <i>retryIntervalSec</i> and <i>randomRetryIntervalSec</i> settings.<br>
   * <br>
   * Default: 0
   */
  public long getFirstRetryIntervalSec() {
    return pjsua2JNI.AccountRegConfig_firstRetryIntervalSec_get(swigCPtr, this);
  }

  /**
   * This specifies maximum randomized value to be added/substracted<br>
   * to/from the registration retry interval specified in <br>
   * <i>reg_retry_interval</i> and <i>reg_first_retry_interval</i>, in second.<br>
   * This is useful to avoid all clients re-registering at the same time.<br>
   * For example, if the registration retry interval is set to 100 seconds<br>
   * and this is set to 10 seconds, the actual registration retry interval<br>
   * will be in the range of 90 to 110 seconds.<br>
   * <br>
   * See also <i>retryIntervalSec</i> and <i>firstRetryIntervalSec</i> settings.<br>
   * <br>
   * Default: 10
   */
  public void setRandomRetryIntervalSec(long value) {
    pjsua2JNI.AccountRegConfig_randomRetryIntervalSec_set(swigCPtr, this, value);
  }

  /**
   * This specifies maximum randomized value to be added/substracted<br>
   * to/from the registration retry interval specified in <br>
   * <i>reg_retry_interval</i> and <i>reg_first_retry_interval</i>, in second.<br>
   * This is useful to avoid all clients re-registering at the same time.<br>
   * For example, if the registration retry interval is set to 100 seconds<br>
   * and this is set to 10 seconds, the actual registration retry interval<br>
   * will be in the range of 90 to 110 seconds.<br>
   * <br>
   * See also <i>retryIntervalSec</i> and <i>firstRetryIntervalSec</i> settings.<br>
   * <br>
   * Default: 10
   */
  public long getRandomRetryIntervalSec() {
    return pjsua2JNI.AccountRegConfig_randomRetryIntervalSec_get(swigCPtr, this);
  }

  /**
   * Specify the number of seconds to refresh the client registration<br>
   * before the registration expires.<br>
   * <br>
   * Default: PJSIP_REGISTER_CLIENT_DELAY_BEFORE_REFRESH, 5 seconds
   */
  public void setDelayBeforeRefreshSec(long value) {
    pjsua2JNI.AccountRegConfig_delayBeforeRefreshSec_set(swigCPtr, this, value);
  }

  /**
   * Specify the number of seconds to refresh the client registration<br>
   * before the registration expires.<br>
   * <br>
   * Default: PJSIP_REGISTER_CLIENT_DELAY_BEFORE_REFRESH, 5 seconds
   */
  public long getDelayBeforeRefreshSec() {
    return pjsua2JNI.AccountRegConfig_delayBeforeRefreshSec_get(swigCPtr, this);
  }

  /**
   * Specify whether calls of the configured account should be dropped<br>
   * after registration failure and an attempt of re-registration has<br>
   * also failed.<br>
   * <br>
   * Default: FALSE (disabled)
   */
  public void setDropCallsOnFail(boolean value) {
    pjsua2JNI.AccountRegConfig_dropCallsOnFail_set(swigCPtr, this, value);
  }

  /**
   * Specify whether calls of the configured account should be dropped<br>
   * after registration failure and an attempt of re-registration has<br>
   * also failed.<br>
   * <br>
   * Default: FALSE (disabled)
   */
  public boolean getDropCallsOnFail() {
    return pjsua2JNI.AccountRegConfig_dropCallsOnFail_get(swigCPtr, this);
  }

  /**
   * Specify the maximum time to wait for unregistration requests to<br>
   * complete during library shutdown sequence.<br>
   * <br>
   * Default: PJSUA_UNREG_TIMEOUT
   */
  public void setUnregWaitMsec(long value) {
    pjsua2JNI.AccountRegConfig_unregWaitMsec_set(swigCPtr, this, value);
  }

  /**
   * Specify the maximum time to wait for unregistration requests to<br>
   * complete during library shutdown sequence.<br>
   * <br>
   * Default: PJSUA_UNREG_TIMEOUT
   */
  public long getUnregWaitMsec() {
    return pjsua2JNI.AccountRegConfig_unregWaitMsec_get(swigCPtr, this);
  }

  /**
   * Specify how the registration uses the outbound and account proxy<br>
   * settings. This controls if and what Route headers will appear in<br>
   * the REGISTER request of this account. The value is bitmask combination<br>
   * of PJSUA_REG_USE_OUTBOUND_PROXY and PJSUA_REG_USE_ACC_PROXY bits.<br>
   * If the value is set to 0, the REGISTER request will not use any proxy<br>
   * (i.e. it will not have any Route headers).<br>
   * <br>
   * Default: 3 (PJSUA_REG_USE_OUTBOUND_PROXY | PJSUA_REG_USE_ACC_PROXY)
   */
  public void setProxyUse(long value) {
    pjsua2JNI.AccountRegConfig_proxyUse_set(swigCPtr, this, value);
  }

  /**
   * Specify how the registration uses the outbound and account proxy<br>
   * settings. This controls if and what Route headers will appear in<br>
   * the REGISTER request of this account. The value is bitmask combination<br>
   * of PJSUA_REG_USE_OUTBOUND_PROXY and PJSUA_REG_USE_ACC_PROXY bits.<br>
   * If the value is set to 0, the REGISTER request will not use any proxy<br>
   * (i.e. it will not have any Route headers).<br>
   * <br>
   * Default: 3 (PJSUA_REG_USE_OUTBOUND_PROXY | PJSUA_REG_USE_ACC_PROXY)
   */
  public long getProxyUse() {
    return pjsua2JNI.AccountRegConfig_proxyUse_get(swigCPtr, this);
  }

  /**
   * Read this object from a container node.<br>
   * <br>
   * @param node              Container to read values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountRegConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container node.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountRegConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  public AccountRegConfig() {
    this(pjsua2JNI.new_AccountRegConfig(), true);
  }

}
