/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Various SIP settings for the account. This will be specified in<br>
 * AccountConfig.
 */
public class AccountSipConfig extends PersistentObject {
  private transient long swigCPtr;

  protected AccountSipConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.AccountSipConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AccountSipConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AccountSipConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Array of credentials. If registration is desired, normally there should<br>
   * be at least one credential specified, to successfully authenticate<br>
   * against the service provider. More credentials can be specified, for<br>
   * example when the requests are expected to be challenged by the<br>
   * proxies in the route set.
   */
  public void setAuthCreds(AuthCredInfoVector value) {
    pjsua2JNI.AccountSipConfig_authCreds_set(swigCPtr, this, AuthCredInfoVector.getCPtr(value), value);
  }

  /**
   * Array of credentials. If registration is desired, normally there should<br>
   * be at least one credential specified, to successfully authenticate<br>
   * against the service provider. More credentials can be specified, for<br>
   * example when the requests are expected to be challenged by the<br>
   * proxies in the route set.
   */
  public AuthCredInfoVector getAuthCreds() {
    long cPtr = pjsua2JNI.AccountSipConfig_authCreds_get(swigCPtr, this);
    return (cPtr == 0) ? null : new AuthCredInfoVector(cPtr, false);
  }

  /**
   * Array of proxy servers to visit for outgoing requests. Each of the<br>
   * entry is translated into one Route URI.
   */
  public void setProxies(StringVector value) {
    pjsua2JNI.AccountSipConfig_proxies_set(swigCPtr, this, StringVector.getCPtr(value), value);
  }

  /**
   * Array of proxy servers to visit for outgoing requests. Each of the<br>
   * entry is translated into one Route URI.
   */
  public StringVector getProxies() {
    long cPtr = pjsua2JNI.AccountSipConfig_proxies_get(swigCPtr, this);
    return (cPtr == 0) ? null : new StringVector(cPtr, false);
  }

  /**
   * Optional URI to be put as Contact for this account. It is recommended<br>
   * that this field is left empty, so that the value will be calculated<br>
   * automatically based on the transport address.
   */
  public void setContactForced(String value) {
    pjsua2JNI.AccountSipConfig_contactForced_set(swigCPtr, this, value);
  }

  /**
   * Optional URI to be put as Contact for this account. It is recommended<br>
   * that this field is left empty, so that the value will be calculated<br>
   * automatically based on the transport address.
   */
  public String getContactForced() {
    return pjsua2JNI.AccountSipConfig_contactForced_get(swigCPtr, this);
  }

  /**
   * Additional parameters that will be appended in the Contact header<br>
   * for this account. This will affect the Contact header in all SIP<br>
   * messages sent on behalf of this account, including but not limited to<br>
   * REGISTER, INVITE, and SUBCRIBE requests or responses.<br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public void setContactParams(String value) {
    pjsua2JNI.AccountSipConfig_contactParams_set(swigCPtr, this, value);
  }

  /**
   * Additional parameters that will be appended in the Contact header<br>
   * for this account. This will affect the Contact header in all SIP<br>
   * messages sent on behalf of this account, including but not limited to<br>
   * REGISTER, INVITE, and SUBCRIBE requests or responses.<br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public String getContactParams() {
    return pjsua2JNI.AccountSipConfig_contactParams_get(swigCPtr, this);
  }

  /**
   * Additional URI parameters that will be appended in the Contact URI<br>
   * for this account. This will affect the Contact URI in all SIP<br>
   * messages sent on behalf of this account, including but not limited to<br>
   * REGISTER, INVITE, and SUBCRIBE requests or responses.<br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public void setContactUriParams(String value) {
    pjsua2JNI.AccountSipConfig_contactUriParams_set(swigCPtr, this, value);
  }

  /**
   * Additional URI parameters that will be appended in the Contact URI<br>
   * for this account. This will affect the Contact URI in all SIP<br>
   * messages sent on behalf of this account, including but not limited to<br>
   * REGISTER, INVITE, and SUBCRIBE requests or responses.<br>
   * <br>
   * The parameters should be preceeded by semicolon, and all strings must<br>
   * be properly escaped. Example:<br>
   *   ";my-param=X;another-param=Hi%20there"
   */
  public String getContactUriParams() {
    return pjsua2JNI.AccountSipConfig_contactUriParams_get(swigCPtr, this);
  }

  /**
   * If this flag is set, the authentication client framework will<br>
   * send an empty Authorization header in each initial request.<br>
   * Default is no.
   */
  public void setAuthInitialEmpty(boolean value) {
    pjsua2JNI.AccountSipConfig_authInitialEmpty_set(swigCPtr, this, value);
  }

  /**
   * If this flag is set, the authentication client framework will<br>
   * send an empty Authorization header in each initial request.<br>
   * Default is no.
   */
  public boolean getAuthInitialEmpty() {
    return pjsua2JNI.AccountSipConfig_authInitialEmpty_get(swigCPtr, this);
  }

  /**
   * Specify the algorithm to use when empty Authorization header<br>
   * is to be sent for each initial request (see above)
   */
  public void setAuthInitialAlgorithm(String value) {
    pjsua2JNI.AccountSipConfig_authInitialAlgorithm_set(swigCPtr, this, value);
  }

  /**
   * Specify the algorithm to use when empty Authorization header<br>
   * is to be sent for each initial request (see above)
   */
  public String getAuthInitialAlgorithm() {
    return pjsua2JNI.AccountSipConfig_authInitialAlgorithm_get(swigCPtr, this);
  }

  /**
   * Optionally bind this account to specific transport. This normally is<br>
   * not a good idea, as account should be able to send requests using<br>
   * any available transports according to the destination. But some<br>
   * application may want to have explicit control over the transport to<br>
   * use, so in that case it can set this field.<br>
   * <br>
   * Default: -1 (PJSUA_INVALID_ID)<br>
   * <br>
   * @see Account#setTransport()
   */
  public void setTransportId(int value) {
    pjsua2JNI.AccountSipConfig_transportId_set(swigCPtr, this, value);
  }

  /**
   * Optionally bind this account to specific transport. This normally is<br>
   * not a good idea, as account should be able to send requests using<br>
   * any available transports according to the destination. But some<br>
   * application may want to have explicit control over the transport to<br>
   * use, so in that case it can set this field.<br>
   * <br>
   * Default: -1 (PJSUA_INVALID_ID)<br>
   * <br>
   * @see Account#setTransport()
   */
  public int getTransportId() {
    return pjsua2JNI.AccountSipConfig_transportId_get(swigCPtr, this);
  }

  /**
   * Specify whether IPv6 should be used for SIP signalling.<br>
   * <br>
   * Default: PJSUA_IPV6_ENABLED_NO_PREFERENCE<br>
   * (IP version used will be based on the address resolution<br>
   * returned by OS/resolver)
   */
  public void setIpv6Use(int value) {
    pjsua2JNI.AccountSipConfig_ipv6Use_set(swigCPtr, this, value);
  }

  /**
   * Specify whether IPv6 should be used for SIP signalling.<br>
   * <br>
   * Default: PJSUA_IPV6_ENABLED_NO_PREFERENCE<br>
   * (IP version used will be based on the address resolution<br>
   * returned by OS/resolver)
   */
  public int getIpv6Use() {
    return pjsua2JNI.AccountSipConfig_ipv6Use_get(swigCPtr, this);
  }

  /**
   * Read this object from a container node.<br>
   * <br>
   * @param node              Container to read values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountSipConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container node.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountSipConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  public AccountSipConfig() {
    this(pjsua2JNI.new_AccountSipConfig(), true);
  }

}
