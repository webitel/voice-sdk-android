/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Account video config. This will be specified in AccountConfig.
 */
public class AccountVideoConfig extends PersistentObject {
  private transient long swigCPtr;

  protected AccountVideoConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.AccountVideoConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AccountVideoConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AccountVideoConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Specify whether incoming video should be shown to screen by default.<br>
   * This applies to incoming call (INVITE), incoming re-INVITE, and<br>
   * incoming UPDATE requests.<br>
   * <br>
   * Regardless of this setting, application can detect incoming video<br>
   * by implementing <i>on_call_media_state()</i> callback and enumerating<br>
   * the media stream(s) with pjsua_call_get_info(). Once incoming<br>
   * video is recognised, application may retrieve the window associated<br>
   * with the incoming video and show or hide it with<br>
   * pjsua_vid_win_set_show().<br>
   * <br>
   * Default: False
   */
  public void setAutoShowIncoming(boolean value) {
    pjsua2JNI.AccountVideoConfig_autoShowIncoming_set(swigCPtr, this, value);
  }

  /**
   * Specify whether incoming video should be shown to screen by default.<br>
   * This applies to incoming call (INVITE), incoming re-INVITE, and<br>
   * incoming UPDATE requests.<br>
   * <br>
   * Regardless of this setting, application can detect incoming video<br>
   * by implementing <i>on_call_media_state()</i> callback and enumerating<br>
   * the media stream(s) with pjsua_call_get_info(). Once incoming<br>
   * video is recognised, application may retrieve the window associated<br>
   * with the incoming video and show or hide it with<br>
   * pjsua_vid_win_set_show().<br>
   * <br>
   * Default: False
   */
  public boolean getAutoShowIncoming() {
    return pjsua2JNI.AccountVideoConfig_autoShowIncoming_get(swigCPtr, this);
  }

  /**
   * Specify whether outgoing video should be activated by default when<br>
   * making outgoing calls and/or when incoming video is detected. This<br>
   * applies to incoming and outgoing calls, incoming re-INVITE, and<br>
   * incoming UPDATE. If the setting is non-zero, outgoing video<br>
   * transmission will be started as soon as response to these requests<br>
   * is sent (or received).<br>
   * <br>
   * Regardless of the value of this setting, application can start and<br>
   * stop outgoing video transmission with pjsua_call_set_vid_strm().<br>
   * <br>
   * Default: False
   */
  public void setAutoTransmitOutgoing(boolean value) {
    pjsua2JNI.AccountVideoConfig_autoTransmitOutgoing_set(swigCPtr, this, value);
  }

  /**
   * Specify whether outgoing video should be activated by default when<br>
   * making outgoing calls and/or when incoming video is detected. This<br>
   * applies to incoming and outgoing calls, incoming re-INVITE, and<br>
   * incoming UPDATE. If the setting is non-zero, outgoing video<br>
   * transmission will be started as soon as response to these requests<br>
   * is sent (or received).<br>
   * <br>
   * Regardless of the value of this setting, application can start and<br>
   * stop outgoing video transmission with pjsua_call_set_vid_strm().<br>
   * <br>
   * Default: False
   */
  public boolean getAutoTransmitOutgoing() {
    return pjsua2JNI.AccountVideoConfig_autoTransmitOutgoing_get(swigCPtr, this);
  }

  /**
   * Specify video window's flags. The value is a bitmask combination of<br>
   * pjmedia_vid_dev_wnd_flag.<br>
   * <br>
   * Default: 0
   */
  public void setWindowFlags(long value) {
    pjsua2JNI.AccountVideoConfig_windowFlags_set(swigCPtr, this, value);
  }

  /**
   * Specify video window's flags. The value is a bitmask combination of<br>
   * pjmedia_vid_dev_wnd_flag.<br>
   * <br>
   * Default: 0
   */
  public long getWindowFlags() {
    return pjsua2JNI.AccountVideoConfig_windowFlags_get(swigCPtr, this);
  }

  /**
   * Specify the default capture device to be used by this account. If<br>
   * vidOutAutoTransmit is enabled, this device will be used for<br>
   * capturing video.<br>
   * <br>
   * Default: PJMEDIA_VID_DEFAULT_CAPTURE_DEV
   */
  public void setDefaultCaptureDevice(int value) {
    pjsua2JNI.AccountVideoConfig_defaultCaptureDevice_set(swigCPtr, this, value);
  }

  /**
   * Specify the default capture device to be used by this account. If<br>
   * vidOutAutoTransmit is enabled, this device will be used for<br>
   * capturing video.<br>
   * <br>
   * Default: PJMEDIA_VID_DEFAULT_CAPTURE_DEV
   */
  public int getDefaultCaptureDevice() {
    return pjsua2JNI.AccountVideoConfig_defaultCaptureDevice_get(swigCPtr, this);
  }

  /**
   * Specify the default rendering device to be used by this account.<br>
   * <br>
   * Default: PJMEDIA_VID_DEFAULT_RENDER_DEV
   */
  public void setDefaultRenderDevice(int value) {
    pjsua2JNI.AccountVideoConfig_defaultRenderDevice_set(swigCPtr, this, value);
  }

  /**
   * Specify the default rendering device to be used by this account.<br>
   * <br>
   * Default: PJMEDIA_VID_DEFAULT_RENDER_DEV
   */
  public int getDefaultRenderDevice() {
    return pjsua2JNI.AccountVideoConfig_defaultRenderDevice_get(swigCPtr, this);
  }

  /**
   * Rate control method.<br>
   * <br>
   * Default: PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING.
   */
  public void setRateControlMethod(int value) {
    pjsua2JNI.AccountVideoConfig_rateControlMethod_set(swigCPtr, this, value);
  }

  /**
   * Rate control method.<br>
   * <br>
   * Default: PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING.
   */
  public int getRateControlMethod() {
    return pjsua2JNI.AccountVideoConfig_rateControlMethod_get(swigCPtr, this);
  }

  /**
   * Upstream/outgoing bandwidth. If this is set to zero, the video stream<br>
   * will use codec maximum bitrate setting.<br>
   * <br>
   * Default: 0 (follow codec maximum bitrate).
   */
  public void setRateControlBandwidth(long value) {
    pjsua2JNI.AccountVideoConfig_rateControlBandwidth_set(swigCPtr, this, value);
  }

  /**
   * Upstream/outgoing bandwidth. If this is set to zero, the video stream<br>
   * will use codec maximum bitrate setting.<br>
   * <br>
   * Default: 0 (follow codec maximum bitrate).
   */
  public long getRateControlBandwidth() {
    return pjsua2JNI.AccountVideoConfig_rateControlBandwidth_get(swigCPtr, this);
  }

  /**
   * The number of keyframe to be sent after the stream is created.<br>
   * <br>
   * Default: PJMEDIA_VID_STREAM_START_KEYFRAME_CNT
   */
  public void setStartKeyframeCount(long value) {
    pjsua2JNI.AccountVideoConfig_startKeyframeCount_set(swigCPtr, this, value);
  }

  /**
   * The number of keyframe to be sent after the stream is created.<br>
   * <br>
   * Default: PJMEDIA_VID_STREAM_START_KEYFRAME_CNT
   */
  public long getStartKeyframeCount() {
    return pjsua2JNI.AccountVideoConfig_startKeyframeCount_get(swigCPtr, this);
  }

  /**
   * The keyframe sending interval after the stream is created.<br>
   * <br>
   * Default: PJMEDIA_VID_STREAM_START_KEYFRAME_INTERVAL_MSEC
   */
  public void setStartKeyframeInterval(long value) {
    pjsua2JNI.AccountVideoConfig_startKeyframeInterval_set(swigCPtr, this, value);
  }

  /**
   * The keyframe sending interval after the stream is created.<br>
   * <br>
   * Default: PJMEDIA_VID_STREAM_START_KEYFRAME_INTERVAL_MSEC
   */
  public long getStartKeyframeInterval() {
    return pjsua2JNI.AccountVideoConfig_startKeyframeInterval_get(swigCPtr, this);
  }

  /**
   * Default constructor
   */
  public AccountVideoConfig() {
    this(pjsua2JNI.new_AccountVideoConfig(), true);
  }

  /**
   * Read this object from a container node.<br>
   * <br>
   * @param node              Container to read values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountVideoConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container node.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.AccountVideoConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

}
