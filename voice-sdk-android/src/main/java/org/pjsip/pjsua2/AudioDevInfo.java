/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Audio device information structure.
 */
public class AudioDevInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected AudioDevInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AudioDevInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AudioDevInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * The device ID
   */
  public void setId(SWIGTYPE_p_pjmedia_aud_dev_index value) {
    pjsua2JNI.AudioDevInfo_id_set(swigCPtr, this, SWIGTYPE_p_pjmedia_aud_dev_index.getCPtr(value));
  }

  /**
   * The device ID
   */
  public SWIGTYPE_p_pjmedia_aud_dev_index getId() {
    return new SWIGTYPE_p_pjmedia_aud_dev_index(pjsua2JNI.AudioDevInfo_id_get(swigCPtr, this), true);
  }

  /**
   * The device name
   */
  public void setName(String value) {
    pjsua2JNI.AudioDevInfo_name_set(swigCPtr, this, value);
  }

  /**
   * The device name
   */
  public String getName() {
    return pjsua2JNI.AudioDevInfo_name_get(swigCPtr, this);
  }

  /**
   * Maximum number of input channels supported by this device. If the<br>
   * value is zero, the device does not support input operation (i.e.<br>
   * it is a playback only device).
   */
  public void setInputCount(long value) {
    pjsua2JNI.AudioDevInfo_inputCount_set(swigCPtr, this, value);
  }

  /**
   * Maximum number of input channels supported by this device. If the<br>
   * value is zero, the device does not support input operation (i.e.<br>
   * it is a playback only device).
   */
  public long getInputCount() {
    return pjsua2JNI.AudioDevInfo_inputCount_get(swigCPtr, this);
  }

  /**
   * Maximum number of output channels supported by this device. If the<br>
   * value is zero, the device does not support output operation (i.e.<br>
   * it is an input only device).
   */
  public void setOutputCount(long value) {
    pjsua2JNI.AudioDevInfo_outputCount_set(swigCPtr, this, value);
  }

  /**
   * Maximum number of output channels supported by this device. If the<br>
   * value is zero, the device does not support output operation (i.e.<br>
   * it is an input only device).
   */
  public long getOutputCount() {
    return pjsua2JNI.AudioDevInfo_outputCount_get(swigCPtr, this);
  }

  /**
   * Default sampling rate.
   */
  public void setDefaultSamplesPerSec(long value) {
    pjsua2JNI.AudioDevInfo_defaultSamplesPerSec_set(swigCPtr, this, value);
  }

  /**
   * Default sampling rate.
   */
  public long getDefaultSamplesPerSec() {
    return pjsua2JNI.AudioDevInfo_defaultSamplesPerSec_get(swigCPtr, this);
  }

  /**
   * The underlying driver name
   */
  public void setDriver(String value) {
    pjsua2JNI.AudioDevInfo_driver_set(swigCPtr, this, value);
  }

  /**
   * The underlying driver name
   */
  public String getDriver() {
    return pjsua2JNI.AudioDevInfo_driver_get(swigCPtr, this);
  }

  /**
   * Device capabilities, as bitmask combination of pjmedia_aud_dev_cap.
   */
  public void setCaps(long value) {
    pjsua2JNI.AudioDevInfo_caps_set(swigCPtr, this, value);
  }

  /**
   * Device capabilities, as bitmask combination of pjmedia_aud_dev_cap.
   */
  public long getCaps() {
    return pjsua2JNI.AudioDevInfo_caps_get(swigCPtr, this);
  }

  /**
   * Supported audio device routes, as bitmask combination of<br>
   * pjmedia_aud_dev_route. The value may be zero if the device<br>
   * does not support audio routing.
   */
  public void setRoutes(long value) {
    pjsua2JNI.AudioDevInfo_routes_set(swigCPtr, this, value);
  }

  /**
   * Supported audio device routes, as bitmask combination of<br>
   * pjmedia_aud_dev_route. The value may be zero if the device<br>
   * does not support audio routing.
   */
  public long getRoutes() {
    return pjsua2JNI.AudioDevInfo_routes_get(swigCPtr, this);
  }

  /**
   * Array of supported extended audio formats
   */
  public void setExtFmt(MediaFormatAudioVector value) {
    pjsua2JNI.AudioDevInfo_extFmt_set(swigCPtr, this, MediaFormatAudioVector.getCPtr(value), value);
  }

  /**
   * Array of supported extended audio formats
   */
  public MediaFormatAudioVector getExtFmt() {
    long cPtr = pjsua2JNI.AudioDevInfo_extFmt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new MediaFormatAudioVector(cPtr, false);
  }

  public AudioDevInfo() {
    this(pjsua2JNI.new_AudioDevInfo(), true);
  }

}
