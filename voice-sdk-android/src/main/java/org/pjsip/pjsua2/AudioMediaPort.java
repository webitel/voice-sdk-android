/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Audio Media Port.
 */
public class AudioMediaPort extends AudioMedia {
  private transient long swigCPtr;

  protected AudioMediaPort(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.AudioMediaPort_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AudioMediaPort obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_AudioMediaPort(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    pjsua2JNI.AudioMediaPort_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    pjsua2JNI.AudioMediaPort_change_ownership(this, swigCPtr, true);
  }

  /**
   * Constructor.
   */
  public AudioMediaPort() {
    this(pjsua2JNI.new_AudioMediaPort(), true);
    pjsua2JNI.AudioMediaPort_director_connect(this, swigCPtr, true, true);
  }

  /**
   * Create an audio media port and register it to the conference bridge.<br>
   * <br>
   * @param name      The port name.<br>
   * @param fmt       The audio format.
   */
  public void createPort(String name, MediaFormatAudio fmt) throws java.lang.Exception {
    pjsua2JNI.AudioMediaPort_createPort(swigCPtr, this, name, MediaFormatAudio.getCPtr(fmt), fmt);
  }

  /**
   * This callback is called to request a frame from this port. On input,<br>
   * frame.size indicates the capacity of the frame buffer and frame.buf<br>
   * will initially be an empty vector. Application can then set the frame<br>
   * type and fill the vector.<br>
   * <br>
   * @param frame       The frame.
   */
  public void onFrameRequested(MediaFrame frame) {
    if (getClass() == AudioMediaPort.class) pjsua2JNI.AudioMediaPort_onFrameRequested(swigCPtr, this, MediaFrame.getCPtr(frame), frame); else pjsua2JNI.AudioMediaPort_onFrameRequestedSwigExplicitAudioMediaPort(swigCPtr, this, MediaFrame.getCPtr(frame), frame);
  }

  /**
   * This callback is called when this port receives a frame. The frame<br>
   * content will be provided in frame.buf vector, and the frame size<br>
   * can be found in either frame.size or the vector's size (both<br>
   * have the same value).<br>
   * <br>
   * @param frame       The frame.
   */
  public void onFrameReceived(MediaFrame frame) {
    if (getClass() == AudioMediaPort.class) pjsua2JNI.AudioMediaPort_onFrameReceived(swigCPtr, this, MediaFrame.getCPtr(frame), frame); else pjsua2JNI.AudioMediaPort_onFrameReceivedSwigExplicitAudioMediaPort(swigCPtr, this, MediaFrame.getCPtr(frame), frame);
  }

}
