/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure describes buddy info, which can be retrieved by via<br>
 * Buddy::getInfo().
 */
public class BuddyInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BuddyInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BuddyInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_BuddyInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * The full URI of the buddy, as specified in the configuration.
   */
  public void setUri(String value) {
    pjsua2JNI.BuddyInfo_uri_set(swigCPtr, this, value);
  }

  /**
   * The full URI of the buddy, as specified in the configuration.
   */
  public String getUri() {
    return pjsua2JNI.BuddyInfo_uri_get(swigCPtr, this);
  }

  /**
   * Buddy's Contact, only available when presence subscription has<br>
   * been established to the buddy.
   */
  public void setContact(String value) {
    pjsua2JNI.BuddyInfo_contact_set(swigCPtr, this, value);
  }

  /**
   * Buddy's Contact, only available when presence subscription has<br>
   * been established to the buddy.
   */
  public String getContact() {
    return pjsua2JNI.BuddyInfo_contact_get(swigCPtr, this);
  }

  /**
   * Flag to indicate that we should monitor the presence information for<br>
   * this buddy (normally yes, unless explicitly disabled).
   */
  public void setPresMonitorEnabled(boolean value) {
    pjsua2JNI.BuddyInfo_presMonitorEnabled_set(swigCPtr, this, value);
  }

  /**
   * Flag to indicate that we should monitor the presence information for<br>
   * this buddy (normally yes, unless explicitly disabled).
   */
  public boolean getPresMonitorEnabled() {
    return pjsua2JNI.BuddyInfo_presMonitorEnabled_get(swigCPtr, this);
  }

  /**
   * If <i>presMonitorEnabled</i> is true, this specifies the last state of<br>
   * the presence subscription. If presence subscription session is currently<br>
   * active, the value will be PJSIP_EVSUB_STATE_ACTIVE. If presence<br>
   * subscription request has been rejected, the value will be<br>
   * PJSIP_EVSUB_STATE_TERMINATED, and the termination reason will be<br>
   * specified in <i>subTermReason</i>.
   */
  public void setSubState(int value) {
    pjsua2JNI.BuddyInfo_subState_set(swigCPtr, this, value);
  }

  /**
   * If <i>presMonitorEnabled</i> is true, this specifies the last state of<br>
   * the presence subscription. If presence subscription session is currently<br>
   * active, the value will be PJSIP_EVSUB_STATE_ACTIVE. If presence<br>
   * subscription request has been rejected, the value will be<br>
   * PJSIP_EVSUB_STATE_TERMINATED, and the termination reason will be<br>
   * specified in <i>subTermReason</i>.
   */
  public int getSubState() {
    return pjsua2JNI.BuddyInfo_subState_get(swigCPtr, this);
  }

  /**
   * String representation of subscription state.
   */
  public void setSubStateName(String value) {
    pjsua2JNI.BuddyInfo_subStateName_set(swigCPtr, this, value);
  }

  /**
   * String representation of subscription state.
   */
  public String getSubStateName() {
    return pjsua2JNI.BuddyInfo_subStateName_get(swigCPtr, this);
  }

  /**
   * Specifies the last presence subscription termination code. This would<br>
   * return the last status of the SUBSCRIBE request. If the subscription<br>
   * is terminated with NOTIFY by the server, this value will be set to<br>
   * 200, and subscription termination reason will be given in the<br>
   * <i>subTermReason</i> field.
   */
  public void setSubTermCode(int value) {
    pjsua2JNI.BuddyInfo_subTermCode_set(swigCPtr, this, value);
  }

  /**
   * Specifies the last presence subscription termination code. This would<br>
   * return the last status of the SUBSCRIBE request. If the subscription<br>
   * is terminated with NOTIFY by the server, this value will be set to<br>
   * 200, and subscription termination reason will be given in the<br>
   * <i>subTermReason</i> field.
   */
  public int getSubTermCode() {
    return pjsua2JNI.BuddyInfo_subTermCode_get(swigCPtr, this);
  }

  /**
   * Specifies the last presence subscription termination reason. If <br>
   * presence subscription is currently active, the value will be empty.
   */
  public void setSubTermReason(String value) {
    pjsua2JNI.BuddyInfo_subTermReason_set(swigCPtr, this, value);
  }

  /**
   * Specifies the last presence subscription termination reason. If <br>
   * presence subscription is currently active, the value will be empty.
   */
  public String getSubTermReason() {
    return pjsua2JNI.BuddyInfo_subTermReason_get(swigCPtr, this);
  }

  /**
   * Presence status.
   */
  public void setPresStatus(PresenceStatus value) {
    pjsua2JNI.BuddyInfo_presStatus_set(swigCPtr, this, PresenceStatus.getCPtr(value), value);
  }

  /**
   * Presence status.
   */
  public PresenceStatus getPresStatus() {
    long cPtr = pjsua2JNI.BuddyInfo_presStatus_get(swigCPtr, this);
    return (cPtr == 0) ? null : new PresenceStatus(cPtr, false);
  }

  /**
   * Default constructor
   */
  public BuddyInfo() {
    this(pjsua2JNI.new_BuddyInfo(), true);
  }

}
