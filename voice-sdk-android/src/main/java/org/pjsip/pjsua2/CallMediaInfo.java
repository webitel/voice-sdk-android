/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Call media information.<br>
 * <br>
 * Application can query conference bridge port of this media using<br>
 * Call::getAudioMedia() if the media type is audio,<br>
 * or Call::getEncodingVideoMedia() / Call::getDecodingVideoMedia()<br>
 * if the media type is video.
 */
public class CallMediaInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CallMediaInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CallMediaInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_CallMediaInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Media index in SDP.
   */
  public void setIndex(long value) {
    pjsua2JNI.CallMediaInfo_index_set(swigCPtr, this, value);
  }

  /**
   * Media index in SDP.
   */
  public long getIndex() {
    return pjsua2JNI.CallMediaInfo_index_get(swigCPtr, this);
  }

  /**
   * Media type.
   */
  public void setType(int value) {
    pjsua2JNI.CallMediaInfo_type_set(swigCPtr, this, value);
  }

  /**
   * Media type.
   */
  public int getType() {
    return pjsua2JNI.CallMediaInfo_type_get(swigCPtr, this);
  }

  /**
   * Media direction.
   */
  public void setDir(int value) {
    pjsua2JNI.CallMediaInfo_dir_set(swigCPtr, this, value);
  }

  /**
   * Media direction.
   */
  public int getDir() {
    return pjsua2JNI.CallMediaInfo_dir_get(swigCPtr, this);
  }

  /**
   * Call media status.
   */
  public void setStatus(int value) {
    pjsua2JNI.CallMediaInfo_status_set(swigCPtr, this, value);
  }

  /**
   * Call media status.
   */
  public int getStatus() {
    return pjsua2JNI.CallMediaInfo_status_get(swigCPtr, this);
  }

  /**
   * Warning: this is deprecated, application can query conference bridge<br>
   * port of this media using Call::getAudioMedia().<br>
   * <br>
   * The conference port number for the call. Only valid if the media type<br>
   * is audio.
   */
  public void setAudioConfSlot(int value) {
    pjsua2JNI.CallMediaInfo_audioConfSlot_set(swigCPtr, this, value);
  }

  /**
   * Warning: this is deprecated, application can query conference bridge<br>
   * port of this media using Call::getAudioMedia().<br>
   * <br>
   * The conference port number for the call. Only valid if the media type<br>
   * is audio.
   */
  public int getAudioConfSlot() {
    return pjsua2JNI.CallMediaInfo_audioConfSlot_get(swigCPtr, this);
  }

  /**
   * The window id for incoming video, if any, or<br>
   * PJSUA_INVALID_ID. Only valid if the media type is video.
   */
  public void setVideoIncomingWindowId(int value) {
    pjsua2JNI.CallMediaInfo_videoIncomingWindowId_set(swigCPtr, this, value);
  }

  /**
   * The window id for incoming video, if any, or<br>
   * PJSUA_INVALID_ID. Only valid if the media type is video.
   */
  public int getVideoIncomingWindowId() {
    return pjsua2JNI.CallMediaInfo_videoIncomingWindowId_get(swigCPtr, this);
  }

  /**
   * The video window instance for incoming video. Only valid if<br>
   * videoIncomingWindowId is not PJSUA_INVALID_ID and<br>
   * the media type is video.
   */
  public void setVideoWindow(VideoWindow value) {
    pjsua2JNI.CallMediaInfo_videoWindow_set(swigCPtr, this, VideoWindow.getCPtr(value), value);
  }

  /**
   * The video window instance for incoming video. Only valid if<br>
   * videoIncomingWindowId is not PJSUA_INVALID_ID and<br>
   * the media type is video.
   */
  public VideoWindow getVideoWindow() {
    long cPtr = pjsua2JNI.CallMediaInfo_videoWindow_get(swigCPtr, this);
    return (cPtr == 0) ? null : new VideoWindow(cPtr, false);
  }

  /**
   * The video capture device for outgoing transmission, if any,<br>
   * or PJMEDIA_VID_INVALID_DEV. Only valid if the media type is video.
   */
  public void setVideoCapDev(int value) {
    pjsua2JNI.CallMediaInfo_videoCapDev_set(swigCPtr, this, value);
  }

  /**
   * The video capture device for outgoing transmission, if any,<br>
   * or PJMEDIA_VID_INVALID_DEV. Only valid if the media type is video.
   */
  public int getVideoCapDev() {
    return pjsua2JNI.CallMediaInfo_videoCapDev_get(swigCPtr, this);
  }

  /**
   * Default constructor
   */
  public CallMediaInfo() {
    this(pjsua2JNI.new_CallMediaInfo(), true);
  }

}
