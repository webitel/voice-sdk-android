/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Call settings.
 */
public class CallSetting {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CallSetting(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CallSetting obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_CallSetting(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Bitmask of pjsua_call_flag constants.<br>
   * <br>
   * Default: PJSUA_CALL_INCLUDE_DISABLED_MEDIA
   */
  public void setFlag(long value) {
    pjsua2JNI.CallSetting_flag_set(swigCPtr, this, value);
  }

  /**
   * Bitmask of pjsua_call_flag constants.<br>
   * <br>
   * Default: PJSUA_CALL_INCLUDE_DISABLED_MEDIA
   */
  public long getFlag() {
    return pjsua2JNI.CallSetting_flag_get(swigCPtr, this);
  }

  /**
   * This flag controls what methods to request keyframe are allowed on<br>
   * the call. Value is bitmask of pjsua_vid_req_keyframe_method.<br>
   * <br>
   * Default: PJSUA_VID_REQ_KEYFRAME_SIP_INFO |<br>
   *          PJSUA_VID_REQ_KEYFRAME_RTCP_PLI
   */
  public void setReqKeyframeMethod(long value) {
    pjsua2JNI.CallSetting_reqKeyframeMethod_set(swigCPtr, this, value);
  }

  /**
   * This flag controls what methods to request keyframe are allowed on<br>
   * the call. Value is bitmask of pjsua_vid_req_keyframe_method.<br>
   * <br>
   * Default: PJSUA_VID_REQ_KEYFRAME_SIP_INFO |<br>
   *          PJSUA_VID_REQ_KEYFRAME_RTCP_PLI
   */
  public long getReqKeyframeMethod() {
    return pjsua2JNI.CallSetting_reqKeyframeMethod_get(swigCPtr, this);
  }

  /**
   * Number of simultaneous active audio streams for this call. Setting<br>
   * this to zero will disable audio in this call.<br>
   * <br>
   * Default: 1
   */
  public void setAudioCount(long value) {
    pjsua2JNI.CallSetting_audioCount_set(swigCPtr, this, value);
  }

  /**
   * Number of simultaneous active audio streams for this call. Setting<br>
   * this to zero will disable audio in this call.<br>
   * <br>
   * Default: 1
   */
  public long getAudioCount() {
    return pjsua2JNI.CallSetting_audioCount_get(swigCPtr, this);
  }

  /**
   * Number of simultaneous active video streams for this call. Setting<br>
   * this to zero will disable video in this call.<br>
   * <br>
   * Default: 1 (if video feature is enabled, otherwise it is zero)
   */
  public void setVideoCount(long value) {
    pjsua2JNI.CallSetting_videoCount_set(swigCPtr, this, value);
  }

  /**
   * Number of simultaneous active video streams for this call. Setting<br>
   * this to zero will disable video in this call.<br>
   * <br>
   * Default: 1 (if video feature is enabled, otherwise it is zero)
   */
  public long getVideoCount() {
    return pjsua2JNI.CallSetting_videoCount_get(swigCPtr, this);
  }

  /**
   * Media direction. This setting will only be used if the flag<br>
   * PJSUA_CALL_SET_MEDIA_DIR is set, and it will persist for subsequent<br>
   * offers or answers.<br>
   * For example, a media that is set as PJMEDIA_DIR_ENCODING can only<br>
   * mark the stream in the SDP as sendonly or inactive, but will not<br>
   * become sendrecv in subsequent offers and answers.<br>
   * Application can update the media direction in any API or callback<br>
   * that accepts CallSetting as a parameter, such as via<br>
   * Call::reinvite/update() or in onCallRxOffer/Reinvite()<br>
   * callback.<br>
   * <br>
   * The index of the media dir will correspond to the provisional media<br>
   * in CallInfo.provMedia.<br>
   * For offers that involve adding new medias (such as initial offer),<br>
   * the index will correspond to all new audio media first, then video.<br>
   * For example, for a new call with 2 audios and 1 video, mediaDir[0]<br>
   * and mediaDir[1] will be for the audios, and mediaDir[2] video.<br>
   * <br>
   * Default: empty vector
   */
  public void setMediaDir(IntVector value) {
    pjsua2JNI.CallSetting_mediaDir_set(swigCPtr, this, IntVector.getCPtr(value), value);
  }

  /**
   * Media direction. This setting will only be used if the flag<br>
   * PJSUA_CALL_SET_MEDIA_DIR is set, and it will persist for subsequent<br>
   * offers or answers.<br>
   * For example, a media that is set as PJMEDIA_DIR_ENCODING can only<br>
   * mark the stream in the SDP as sendonly or inactive, but will not<br>
   * become sendrecv in subsequent offers and answers.<br>
   * Application can update the media direction in any API or callback<br>
   * that accepts CallSetting as a parameter, such as via<br>
   * Call::reinvite/update() or in onCallRxOffer/Reinvite()<br>
   * callback.<br>
   * <br>
   * The index of the media dir will correspond to the provisional media<br>
   * in CallInfo.provMedia.<br>
   * For offers that involve adding new medias (such as initial offer),<br>
   * the index will correspond to all new audio media first, then video.<br>
   * For example, for a new call with 2 audios and 1 video, mediaDir[0]<br>
   * and mediaDir[1] will be for the audios, and mediaDir[2] video.<br>
   * <br>
   * Default: empty vector
   */
  public IntVector getMediaDir() {
    long cPtr = pjsua2JNI.CallSetting_mediaDir_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IntVector(cPtr, false);
  }

  /**
   * User defined Call-ID to be sent out with outgoing INVITE.<br>
   * <br>
   * Note: It is up to the developer to verify uniqueness of the<br>
   * Call-ID as there will be no verification. The developer must<br>
   * change the Call-ID between calls creating a unique id for each<br>
   * outgoing call.<br>
   * <br>
   * This setting will only be used when creating a new outgoing call<br>
   * via Call::makeCall().
   */
  public void setCustomCallId(String value) {
    pjsua2JNI.CallSetting_customCallId_set(swigCPtr, this, value);
  }

  /**
   * User defined Call-ID to be sent out with outgoing INVITE.<br>
   * <br>
   * Note: It is up to the developer to verify uniqueness of the<br>
   * Call-ID as there will be no verification. The developer must<br>
   * change the Call-ID between calls creating a unique id for each<br>
   * outgoing call.<br>
   * <br>
   * This setting will only be used when creating a new outgoing call<br>
   * via Call::makeCall().
   */
  public String getCustomCallId() {
    return pjsua2JNI.CallSetting_customCallId_get(swigCPtr, this);
  }

  /**
   * Default constructor initializes with empty or default values.
   */
  public CallSetting(boolean useDefaultValues) {
    this(pjsua2JNI.new_CallSetting__SWIG_0(useDefaultValues), true);
  }

  /**
   * Default constructor initializes with empty or default values.
   */
  public CallSetting() {
    this(pjsua2JNI.new_CallSetting__SWIG_1(), true);
  }

  /**
   * Check if the settings are set with empty values.<br>
   * <br>
   * @return True if the settings are empty.
   */
  public boolean isEmpty() {
    return pjsua2JNI.CallSetting_isEmpty(swigCPtr, this);
  }

}
