/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Opus codec parameters setting;
 */
public class CodecOpusConfig {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CodecOpusConfig(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CodecOpusConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_CodecOpusConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  Sample rate in Hz.                     
   */
  public void setSample_rate(long value) {
    pjsua2JNI.CodecOpusConfig_sample_rate_set(swigCPtr, this, value);
  }

  /**
   *  Sample rate in Hz.                     
   */
  public long getSample_rate() {
    return pjsua2JNI.CodecOpusConfig_sample_rate_get(swigCPtr, this);
  }

  /**
   *  Number of channels.                    
   */
  public void setChannel_cnt(long value) {
    pjsua2JNI.CodecOpusConfig_channel_cnt_set(swigCPtr, this, value);
  }

  /**
   *  Number of channels.                    
   */
  public long getChannel_cnt() {
    return pjsua2JNI.CodecOpusConfig_channel_cnt_get(swigCPtr, this);
  }

  /**
   *  Frame time in msec.                    
   */
  public void setFrm_ptime(long value) {
    pjsua2JNI.CodecOpusConfig_frm_ptime_set(swigCPtr, this, value);
  }

  /**
   *  Frame time in msec.                    
   */
  public long getFrm_ptime() {
    return pjsua2JNI.CodecOpusConfig_frm_ptime_get(swigCPtr, this);
  }

  /**
   *  Frame time denumerator.             
   */
  public void setFrm_ptime_denum(long value) {
    pjsua2JNI.CodecOpusConfig_frm_ptime_denum_set(swigCPtr, this, value);
  }

  /**
   *  Frame time denumerator.             
   */
  public long getFrm_ptime_denum() {
    return pjsua2JNI.CodecOpusConfig_frm_ptime_denum_get(swigCPtr, this);
  }

  /**
   *  Encoder bit rate in bps.               
   */
  public void setBit_rate(long value) {
    pjsua2JNI.CodecOpusConfig_bit_rate_set(swigCPtr, this, value);
  }

  /**
   *  Encoder bit rate in bps.               
   */
  public long getBit_rate() {
    return pjsua2JNI.CodecOpusConfig_bit_rate_get(swigCPtr, this);
  }

  /**
   *  Encoder's expected packet loss pct.    
   */
  public void setPacket_loss(long value) {
    pjsua2JNI.CodecOpusConfig_packet_loss_set(swigCPtr, this, value);
  }

  /**
   *  Encoder's expected packet loss pct.    
   */
  public long getPacket_loss() {
    return pjsua2JNI.CodecOpusConfig_packet_loss_get(swigCPtr, this);
  }

  /**
   *  Encoder complexity, 0-10(10 is highest)
   */
  public void setComplexity(long value) {
    pjsua2JNI.CodecOpusConfig_complexity_set(swigCPtr, this, value);
  }

  /**
   *  Encoder complexity, 0-10(10 is highest)
   */
  public long getComplexity() {
    return pjsua2JNI.CodecOpusConfig_complexity_get(swigCPtr, this);
  }

  /**
   *  Constant bit rate?                     
   */
  public void setCbr(boolean value) {
    pjsua2JNI.CodecOpusConfig_cbr_set(swigCPtr, this, value);
  }

  /**
   *  Constant bit rate?                     
   */
  public boolean getCbr() {
    return pjsua2JNI.CodecOpusConfig_cbr_get(swigCPtr, this);
  }

  public CodecOpusConfig() {
    this(pjsua2JNI.new_CodecOpusConfig(), true);
  }

}
