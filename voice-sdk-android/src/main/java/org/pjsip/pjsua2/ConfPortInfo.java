/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure descibes information about a particular media port that<br>
 * has been registered into the conference bridge. 
 */
public class ConfPortInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ConfPortInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ConfPortInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_ConfPortInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Conference port number.
   */
  public void setPortId(int value) {
    pjsua2JNI.ConfPortInfo_portId_set(swigCPtr, this, value);
  }

  /**
   * Conference port number.
   */
  public int getPortId() {
    return pjsua2JNI.ConfPortInfo_portId_get(swigCPtr, this);
  }

  /**
   * Port name.
   */
  public void setName(String value) {
    pjsua2JNI.ConfPortInfo_name_set(swigCPtr, this, value);
  }

  /**
   * Port name.
   */
  public String getName() {
    return pjsua2JNI.ConfPortInfo_name_get(swigCPtr, this);
  }

  /**
   * Media audio format information
   */
  public void setFormat(MediaFormatAudio value) {
    pjsua2JNI.ConfPortInfo_format_set(swigCPtr, this, MediaFormatAudio.getCPtr(value), value);
  }

  /**
   * Media audio format information
   */
  public MediaFormatAudio getFormat() {
    long cPtr = pjsua2JNI.ConfPortInfo_format_get(swigCPtr, this);
    return (cPtr == 0) ? null : new MediaFormatAudio(cPtr, false);
  }

  /**
   * Tx level adjustment. Value 1.0 means no adjustment, value 0 means<br>
   * the port is muted, value 2.0 means the level is amplified two times.
   */
  public void setTxLevelAdj(float value) {
    pjsua2JNI.ConfPortInfo_txLevelAdj_set(swigCPtr, this, value);
  }

  /**
   * Tx level adjustment. Value 1.0 means no adjustment, value 0 means<br>
   * the port is muted, value 2.0 means the level is amplified two times.
   */
  public float getTxLevelAdj() {
    return pjsua2JNI.ConfPortInfo_txLevelAdj_get(swigCPtr, this);
  }

  /**
   * Rx level adjustment. Value 1.0 means no adjustment, value 0 means<br>
   * the port is muted, value 2.0 means the level is amplified two times.
   */
  public void setRxLevelAdj(float value) {
    pjsua2JNI.ConfPortInfo_rxLevelAdj_set(swigCPtr, this, value);
  }

  /**
   * Rx level adjustment. Value 1.0 means no adjustment, value 0 means<br>
   * the port is muted, value 2.0 means the level is amplified two times.
   */
  public float getRxLevelAdj() {
    return pjsua2JNI.ConfPortInfo_rxLevelAdj_get(swigCPtr, this);
  }

  /**
   * Array of listeners (in other words, ports where this port is<br>
   * transmitting to).
   */
  public void setListeners(IntVector value) {
    pjsua2JNI.ConfPortInfo_listeners_set(swigCPtr, this, IntVector.getCPtr(value), value);
  }

  /**
   * Array of listeners (in other words, ports where this port is<br>
   * transmitting to).
   */
  public IntVector getListeners() {
    long cPtr = pjsua2JNI.ConfPortInfo_listeners_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IntVector(cPtr, false);
  }

  public ConfPortInfo() {
    this(pjsua2JNI.new_ConfPortInfo(), true);
  }

}
