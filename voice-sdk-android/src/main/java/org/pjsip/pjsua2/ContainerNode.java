/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * A container node is a placeholder for storing other data elements, which<br>
 * could be boolean, number, string, array of strings, or another container.<br>
 * Each data in the container is basically a name/value pair, with a type<br>
 * internally associated with it so that written data can be read in the<br>
 * correct type. Data is read and written serially, hence the order of<br>
 * reading must be the same as the order of writing.<br>
 * <br>
 * Application can read data from it by using the various read methods, and<br>
 * write data to it using the various write methods. Alternatively, it<br>
 * may be more convenient to use the provided macros below to read and write<br>
 * the data, because these macros set the name automatically:<br>
 *      - NODE_READ_BOOL(node,item)<br>
 *      - NODE_READ_UNSIGNED(node,item)<br>
 *      - NODE_READ_INT(node,item)<br>
 *      - NODE_READ_FLOAT(node,item)<br>
 *      - NODE_READ_NUM_T(node,type,item)<br>
 *      - NODE_READ_STRING(node,item)<br>
 *      - NODE_READ_STRINGV(node,item)<br>
 *      - NODE_READ_OBJ(node,item)<br>
 *      - NODE_WRITE_BOOL(node,item)<br>
 *      - NODE_WRITE_UNSIGNED(node,item)<br>
 *      - NODE_WRITE_INT(node,item)<br>
 *      - NODE_WRITE_FLOAT(node,item)<br>
 *      - NODE_WRITE_NUM_T(node,type,item)<br>
 *      - NODE_WRITE_STRING(node,item)<br>
 *      - NODE_WRITE_STRINGV(node,item)<br>
 *      - NODE_WRITE_OBJ(node,item)<br>
 * <br>
 * Implementation notes:<br>
 * <br>
 * The ContainerNode class is subclass-able, but not in the usual C++ way.<br>
 * With the usual C++ inheritance, some methods will be made pure virtual<br>
 * and must be implemented by the actual class. However, doing so will<br>
 * require dynamic instantiation of the ContainerNode class, which means<br>
 * we will need to pass around the class as pointer, for example as the<br>
 * return value of readContainer() and writeNewContainer() methods. Then<br>
 * we will need to establish who needs or how to delete these objects, or<br>
 * use shared pointer mechanism, each of which is considered too inconvenient<br>
 * or complicated for the purpose.<br>
 * <br>
 * So hence we use C style "inheritance", where the methods are declared in<br>
 * container_node_op and the data in container_node_internal_data structures.<br>
 * An implementation of ContainerNode class will need to set up these members<br>
 * with values that makes sense to itself. The methods in container_node_op<br>
 * contains the pointer to the actual implementation of the operation, which<br>
 * would be specific according to the format of the document. The methods in<br>
 * this ContainerNode class are just thin wrappers which call the<br>
 * implementation in the container_node_op structure.
 */
public class ContainerNode {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ContainerNode(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ContainerNode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_ContainerNode(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Determine if there is unread element. If yes, then app can use one of<br>
   * the readXxx() functions to read it.
   */
  public boolean hasUnread() {
    return pjsua2JNI.ContainerNode_hasUnread(swigCPtr, this);
  }

  /**
   * Get the name of the next unread element.
   */
  public String unreadName() throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_unreadName(swigCPtr, this);
  }

  /**
   * Read an integer value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public int readInt(String name) throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readInt__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read an integer value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public int readInt() throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readInt__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a number value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public float readNumber(String name) throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readNumber__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read a number value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public float readNumber() throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readNumber__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a boolean value from the container and return the value.<br>
   * This will throw Error if the current element is not a boolean.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public boolean readBool(String name) throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readBool__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read a boolean value from the container and return the value.<br>
   * This will throw Error if the current element is not a boolean.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public boolean readBool() throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readBool__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a string value from the container and return the value.<br>
   * This will throw Error if the current element is not a string.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public String readString(String name) throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readString__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read a string value from the container and return the value.<br>
   * This will throw Error if the current element is not a string.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public String readString() throws java.lang.Exception {
    return pjsua2JNI.ContainerNode_readString__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a string array from the container. This will throw Error<br>
   * if the current element is not a string array. The read position<br>
   * will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public StringVector readStringVector(String name) throws java.lang.Exception {
    return new StringVector(pjsua2JNI.ContainerNode_readStringVector__SWIG_0(swigCPtr, this, name), true);
  }

  /**
   * Read a string array from the container. This will throw Error<br>
   * if the current element is not a string array. The read position<br>
   * will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public StringVector readStringVector() throws java.lang.Exception {
    return new StringVector(pjsua2JNI.ContainerNode_readStringVector__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Read the specified object from the container. This is equal to<br>
   * calling PersistentObject.readObject(ContainerNode);<br>
   * <br>
   * @param obj       The object to read.
   */
  public void readObject(PersistentObject obj) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_readObject(swigCPtr, this, PersistentObject.getCPtr(obj), obj);
  }

  /**
   * Read a container from the container. This will throw Error if the<br>
   * current element is not a container. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readContainer(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.ContainerNode_readContainer__SWIG_0(swigCPtr, this, name), true);
  }

  /**
   * Read a container from the container. This will throw Error if the<br>
   * current element is not a container. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readContainer() throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.ContainerNode_readContainer__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Read array container from the container. This will throw Error if the<br>
   * current element is not an array. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readArray(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.ContainerNode_readArray__SWIG_0(swigCPtr, this, name), true);
  }

  /**
   * Read array container from the container. This will throw Error if the<br>
   * current element is not an array. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readArray() throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.ContainerNode_readArray__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Write a number value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param num       The value to be written.
   */
  public void writeNumber(String name, float num) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_writeNumber(swigCPtr, this, name, num);
  }

  /**
   * Write a number value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param num       The value to be written.
   */
  public void writeInt(String name, int num) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_writeInt(swigCPtr, this, name, num);
  }

  /**
   * Write a boolean value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param value     The value to be written.
   */
  public void writeBool(String name, boolean value) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_writeBool(swigCPtr, this, name, value);
  }

  /**
   * Write a string value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param value     The value to be written.
   */
  public void writeString(String name, String value) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_writeString(swigCPtr, this, name, value);
  }

  /**
   * Write string vector to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param arr       The vector to be written.
   */
  public void writeStringVector(String name, StringVector arr) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_writeStringVector(swigCPtr, this, name, StringVector.getCPtr(arr), arr);
  }

  /**
   * Write an object to the container. This is equal to calling<br>
   * PersistentObject.writeObject(ContainerNode);<br>
   * <br>
   * @param obj       The object to be written
   */
  public void writeObject(PersistentObject obj) throws java.lang.Exception {
    pjsua2JNI.ContainerNode_writeObject(swigCPtr, this, PersistentObject.getCPtr(obj), obj);
  }

  /**
   * Create and write an empty Object node that can be used as parent<br>
   * for subsequent write operations.<br>
   * <br>
   * @param name      The name for the new container in the container.<br>
   * <br>
   * @return A sub-container.
   */
  public ContainerNode writeNewContainer(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.ContainerNode_writeNewContainer(swigCPtr, this, name), true);
  }

  /**
   * Create and write an empty array node that can be used as parent<br>
   * for subsequent write operations.<br>
   * <br>
   * @param name      The name for the array.<br>
   * <br>
   * @return A sub-container.
   */
  public ContainerNode writeNewArray(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.ContainerNode_writeNewArray(swigCPtr, this, name), true);
  }

  public ContainerNode() {
    this(pjsua2JNI.new_ContainerNode(), true);
  }

}
