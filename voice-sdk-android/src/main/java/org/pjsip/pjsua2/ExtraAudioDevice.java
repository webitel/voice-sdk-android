/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Extra audio device. This class allows application to have multiple<br>
 * sound device instances active concurrently.<br>
 * <br>
 * Application may also use this class to improve media clock. Normally<br>
 * media clock is driven by sound device in master port, but unfortunately<br>
 * some sound devices may produce jittery clock. To improve media clock,<br>
 * application can install Null Sound Device (i.e: using<br>
 * AudDevManager::setNullDev()), which will act as a master port, and<br>
 * install the sound device as extra sound device.<br>
 * <br>
 * Note that extra sound device will not have auto-close upon idle feature.<br>
 * Also note that the extra sound device only supports mono channel.
 */
public class ExtraAudioDevice extends AudioMedia {
  private transient long swigCPtr;

  protected ExtraAudioDevice(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.ExtraAudioDevice_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ExtraAudioDevice obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_ExtraAudioDevice(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Constructor.<br>
   * <br>
   * @param playdev           Playback device ID.<br>
   * @param recdev            Record device ID.
   */
  public ExtraAudioDevice(int playdev, int recdev) {
    this(pjsua2JNI.new_ExtraAudioDevice(playdev, recdev), true);
  }

  /**
   * Open the audio device using format (e.g.: clock rate, bit per sample,<br>
   * samples per frame) matched to the conference bridge's format, except<br>
   * the channel count, which will be set to one (mono channel). This will<br>
   * also register the audio device port to conference bridge.
   */
  public void open() {
    pjsua2JNI.ExtraAudioDevice_open(swigCPtr, this);
  }

  /**
   * Close the audio device and unregister the audio device port from the<br>
   * conference bridge.
   */
  public void close() throws java.lang.Exception {
    pjsua2JNI.ExtraAudioDevice_close(swigCPtr, this);
  }

  /**
   * Is the extra audio device opened?<br>
   * <br>
   * @return 'true' if it is opened.
   */
  public boolean isOpened() {
    return pjsua2JNI.ExtraAudioDevice_isOpened(swigCPtr, this);
  }

}
