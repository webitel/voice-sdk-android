/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Parameter of Endpoint::handleIpChange().
 */
public class IpChangeParam {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IpChangeParam(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IpChangeParam obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_IpChangeParam(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * If set to PJ_TRUE, this will restart the transport listener.<br>
   * <br>
   * Default : PJ_TRUE
   */
  public void setRestartListener(boolean value) {
    pjsua2JNI.IpChangeParam_restartListener_set(swigCPtr, this, value);
  }

  /**
   * If set to PJ_TRUE, this will restart the transport listener.<br>
   * <br>
   * Default : PJ_TRUE
   */
  public boolean getRestartListener() {
    return pjsua2JNI.IpChangeParam_restartListener_get(swigCPtr, this);
  }

  /**
   * If <i>restartListener</i> is set to PJ_TRUE, some delay might be needed <br>
   * for the listener to be restarted. Use this to set the delay.<br>
   * <br>
   * Default : PJSUA_TRANSPORT_RESTART_DELAY_TIME
   */
  public void setRestartLisDelay(long value) {
    pjsua2JNI.IpChangeParam_restartLisDelay_set(swigCPtr, this, value);
  }

  /**
   * If <i>restartListener</i> is set to PJ_TRUE, some delay might be needed <br>
   * for the listener to be restarted. Use this to set the delay.<br>
   * <br>
   * Default : PJSUA_TRANSPORT_RESTART_DELAY_TIME
   */
  public long getRestartLisDelay() {
    return pjsua2JNI.IpChangeParam_restartLisDelay_get(swigCPtr, this);
  }

  /**
   * If set to PJ_TRUE, this will forcefully shutdown all transports.<br>
   * Note that this will shutdown TCP/TLS transports only, UDP transport<br>
   * should be restarted via restart_listener.<br>
   * <br>
   * Default : PJ_TRUE
   */
  public void setShutdownTransport(boolean value) {
    pjsua2JNI.IpChangeParam_shutdownTransport_set(swigCPtr, this, value);
  }

  /**
   * If set to PJ_TRUE, this will forcefully shutdown all transports.<br>
   * Note that this will shutdown TCP/TLS transports only, UDP transport<br>
   * should be restarted via restart_listener.<br>
   * <br>
   * Default : PJ_TRUE
   */
  public boolean getShutdownTransport() {
    return pjsua2JNI.IpChangeParam_shutdownTransport_get(swigCPtr, this);
  }

  /**
   * Constructor.
   */
  public IpChangeParam() {
    this(pjsua2JNI.new_IpChangeParam(), true);
  }

}
