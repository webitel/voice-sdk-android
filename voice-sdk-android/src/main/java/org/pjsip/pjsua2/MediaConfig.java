/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure describes media configuration, which will be specified<br>
 * when calling Lib::init().
 */
public class MediaConfig extends PersistentObject {
  private transient long swigCPtr;

  protected MediaConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.MediaConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MediaConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_MediaConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Clock rate to be applied to the conference bridge.<br>
   * If value is zero, default clock rate will be used<br>
   * (PJSUA_DEFAULT_CLOCK_RATE, which by default is 16KHz).
   */
  public void setClockRate(long value) {
    pjsua2JNI.MediaConfig_clockRate_set(swigCPtr, this, value);
  }

  /**
   * Clock rate to be applied to the conference bridge.<br>
   * If value is zero, default clock rate will be used<br>
   * (PJSUA_DEFAULT_CLOCK_RATE, which by default is 16KHz).
   */
  public long getClockRate() {
    return pjsua2JNI.MediaConfig_clockRate_get(swigCPtr, this);
  }

  /**
   * Clock rate to be applied when opening the sound device.<br>
   * If value is zero, conference bridge clock rate will be used.
   */
  public void setSndClockRate(long value) {
    pjsua2JNI.MediaConfig_sndClockRate_set(swigCPtr, this, value);
  }

  /**
   * Clock rate to be applied when opening the sound device.<br>
   * If value is zero, conference bridge clock rate will be used.
   */
  public long getSndClockRate() {
    return pjsua2JNI.MediaConfig_sndClockRate_get(swigCPtr, this);
  }

  /**
   * Sound device uses <a href="#PJMEDIA_CLOCK">PJMEDIA_CLOCK</a> instead of native sound device<br>
   * clock, generally this will be able to reduce jitter and clock drift.<br>
   * <br>
   * This option is not applicable for encoded/non-PCM format.<br>
   * <br>
   * Default value: PJSUA_DEFAULT_SND_USE_SW_CLOCK
   */
  public void setSndUseSwClock(boolean value) {
    pjsua2JNI.MediaConfig_sndUseSwClock_set(swigCPtr, this, value);
  }

  /**
   * Sound device uses <a href="#PJMEDIA_CLOCK">PJMEDIA_CLOCK</a> instead of native sound device<br>
   * clock, generally this will be able to reduce jitter and clock drift.<br>
   * <br>
   * This option is not applicable for encoded/non-PCM format.<br>
   * <br>
   * Default value: PJSUA_DEFAULT_SND_USE_SW_CLOCK
   */
  public boolean getSndUseSwClock() {
    return pjsua2JNI.MediaConfig_sndUseSwClock_get(swigCPtr, this);
  }

  /**
   * Channel count be applied when opening the sound device and<br>
   * conference bridge.
   */
  public void setChannelCount(long value) {
    pjsua2JNI.MediaConfig_channelCount_set(swigCPtr, this, value);
  }

  /**
   * Channel count be applied when opening the sound device and<br>
   * conference bridge.
   */
  public long getChannelCount() {
    return pjsua2JNI.MediaConfig_channelCount_get(swigCPtr, this);
  }

  /**
   * Specify audio frame ptime. The value here will affect the<br>
   * samples per frame of both the sound device and the conference<br>
   * bridge. Specifying lower ptime will normally reduce the<br>
   * latency.<br>
   * <br>
   * Default value: PJSUA_DEFAULT_AUDIO_FRAME_PTIME
   */
  public void setAudioFramePtime(long value) {
    pjsua2JNI.MediaConfig_audioFramePtime_set(swigCPtr, this, value);
  }

  /**
   * Specify audio frame ptime. The value here will affect the<br>
   * samples per frame of both the sound device and the conference<br>
   * bridge. Specifying lower ptime will normally reduce the<br>
   * latency.<br>
   * <br>
   * Default value: PJSUA_DEFAULT_AUDIO_FRAME_PTIME
   */
  public long getAudioFramePtime() {
    return pjsua2JNI.MediaConfig_audioFramePtime_get(swigCPtr, this);
  }

  /**
   * Specify maximum number of media ports to be created in the<br>
   * conference bridge. Since all media terminate in the bridge<br>
   * (calls, file player, file recorder, etc), the value must be<br>
   * large enough to support all of them. However, the larger<br>
   * the value, the more computations are performed.<br>
   * <br>
   * Default value: PJSUA_MAX_CONF_PORTS
   */
  public void setMaxMediaPorts(long value) {
    pjsua2JNI.MediaConfig_maxMediaPorts_set(swigCPtr, this, value);
  }

  /**
   * Specify maximum number of media ports to be created in the<br>
   * conference bridge. Since all media terminate in the bridge<br>
   * (calls, file player, file recorder, etc), the value must be<br>
   * large enough to support all of them. However, the larger<br>
   * the value, the more computations are performed.<br>
   * <br>
   * Default value: PJSUA_MAX_CONF_PORTS
   */
  public long getMaxMediaPorts() {
    return pjsua2JNI.MediaConfig_maxMediaPorts_get(swigCPtr, this);
  }

  /**
   * Specify whether the media manager should manage its own<br>
   * ioqueue for the RTP/RTCP sockets. If yes, ioqueue will be created<br>
   * and at least one worker thread will be created too. If no,<br>
   * the RTP/RTCP sockets will share the same ioqueue as SIP sockets,<br>
   * and no worker thread is needed.<br>
   * <br>
   * Normally application would say yes here, unless it wants to<br>
   * run everything from a single thread.
   */
  public void setHasIoqueue(boolean value) {
    pjsua2JNI.MediaConfig_hasIoqueue_set(swigCPtr, this, value);
  }

  /**
   * Specify whether the media manager should manage its own<br>
   * ioqueue for the RTP/RTCP sockets. If yes, ioqueue will be created<br>
   * and at least one worker thread will be created too. If no,<br>
   * the RTP/RTCP sockets will share the same ioqueue as SIP sockets,<br>
   * and no worker thread is needed.<br>
   * <br>
   * Normally application would say yes here, unless it wants to<br>
   * run everything from a single thread.
   */
  public boolean getHasIoqueue() {
    return pjsua2JNI.MediaConfig_hasIoqueue_get(swigCPtr, this);
  }

  /**
   * Specify the number of worker threads to handle incoming RTP<br>
   * packets. A value of one is recommended for most applications.
   */
  public void setThreadCnt(long value) {
    pjsua2JNI.MediaConfig_threadCnt_set(swigCPtr, this, value);
  }

  /**
   * Specify the number of worker threads to handle incoming RTP<br>
   * packets. A value of one is recommended for most applications.
   */
  public long getThreadCnt() {
    return pjsua2JNI.MediaConfig_threadCnt_get(swigCPtr, this);
  }

  /**
   * Media quality, 0-10, according to this table:<br>
   *   5-10: resampling use large filter,<br>
   *   3-4:  resampling use small filter,<br>
   *   1-2:  resampling use linear.<br>
   * The media quality also sets speex codec quality/complexity to the<br>
   * number.<br>
   * <br>
   * Default: PJSUA_DEFAULT_CODEC_QUALITY.
   */
  public void setQuality(long value) {
    pjsua2JNI.MediaConfig_quality_set(swigCPtr, this, value);
  }

  /**
   * Media quality, 0-10, according to this table:<br>
   *   5-10: resampling use large filter,<br>
   *   3-4:  resampling use small filter,<br>
   *   1-2:  resampling use linear.<br>
   * The media quality also sets speex codec quality/complexity to the<br>
   * number.<br>
   * <br>
   * Default: PJSUA_DEFAULT_CODEC_QUALITY.
   */
  public long getQuality() {
    return pjsua2JNI.MediaConfig_quality_get(swigCPtr, this);
  }

  /**
   * Specify default codec ptime.<br>
   * <br>
   * Default: 0 (codec specific)
   */
  public void setPtime(long value) {
    pjsua2JNI.MediaConfig_ptime_set(swigCPtr, this, value);
  }

  /**
   * Specify default codec ptime.<br>
   * <br>
   * Default: 0 (codec specific)
   */
  public long getPtime() {
    return pjsua2JNI.MediaConfig_ptime_get(swigCPtr, this);
  }

  /**
   * Disable VAD?<br>
   * <br>
   * Default: 0 (codec specific)
   */
  public void setNoVad(boolean value) {
    pjsua2JNI.MediaConfig_noVad_set(swigCPtr, this, value);
  }

  /**
   * Disable VAD?<br>
   * <br>
   * Default: 0 (codec specific)
   */
  public boolean getNoVad() {
    return pjsua2JNI.MediaConfig_noVad_get(swigCPtr, this);
  }

  /**
   * iLBC mode (20 or 30).<br>
   * <br>
   * Default: 30 (PJSUA_DEFAULT_ILBC_MODE)
   */
  public void setIlbcMode(long value) {
    pjsua2JNI.MediaConfig_ilbcMode_set(swigCPtr, this, value);
  }

  /**
   * iLBC mode (20 or 30).<br>
   * <br>
   * Default: 30 (PJSUA_DEFAULT_ILBC_MODE)
   */
  public long getIlbcMode() {
    return pjsua2JNI.MediaConfig_ilbcMode_get(swigCPtr, this);
  }

  /**
   * Percentage of RTP packet to drop in TX direction<br>
   * (to simulate packet lost).<br>
   * <br>
   * Default: 0
   */
  public void setTxDropPct(long value) {
    pjsua2JNI.MediaConfig_txDropPct_set(swigCPtr, this, value);
  }

  /**
   * Percentage of RTP packet to drop in TX direction<br>
   * (to simulate packet lost).<br>
   * <br>
   * Default: 0
   */
  public long getTxDropPct() {
    return pjsua2JNI.MediaConfig_txDropPct_get(swigCPtr, this);
  }

  /**
   * Percentage of RTP packet to drop in RX direction<br>
   * (to simulate packet lost).<br>
   * <br>
   * Default: 0
   */
  public void setRxDropPct(long value) {
    pjsua2JNI.MediaConfig_rxDropPct_set(swigCPtr, this, value);
  }

  /**
   * Percentage of RTP packet to drop in RX direction<br>
   * (to simulate packet lost).<br>
   * <br>
   * Default: 0
   */
  public long getRxDropPct() {
    return pjsua2JNI.MediaConfig_rxDropPct_get(swigCPtr, this);
  }

  /**
   * Echo canceller options (see pjmedia_echo_create()).<br>
   * Specify PJMEDIA_ECHO_USE_SW_ECHO here if application wishes<br>
   * to use software echo canceller instead of device EC.<br>
   * <br>
   * Default: 0.
   */
  public void setEcOptions(long value) {
    pjsua2JNI.MediaConfig_ecOptions_set(swigCPtr, this, value);
  }

  /**
   * Echo canceller options (see pjmedia_echo_create()).<br>
   * Specify PJMEDIA_ECHO_USE_SW_ECHO here if application wishes<br>
   * to use software echo canceller instead of device EC.<br>
   * <br>
   * Default: 0.
   */
  public long getEcOptions() {
    return pjsua2JNI.MediaConfig_ecOptions_get(swigCPtr, this);
  }

  /**
   * Echo canceller tail length, in miliseconds. Setting this to zero<br>
   * will disable echo cancellation.<br>
   * <br>
   * Default: PJSUA_DEFAULT_EC_TAIL_LEN
   */
  public void setEcTailLen(long value) {
    pjsua2JNI.MediaConfig_ecTailLen_set(swigCPtr, this, value);
  }

  /**
   * Echo canceller tail length, in miliseconds. Setting this to zero<br>
   * will disable echo cancellation.<br>
   * <br>
   * Default: PJSUA_DEFAULT_EC_TAIL_LEN
   */
  public long getEcTailLen() {
    return pjsua2JNI.MediaConfig_ecTailLen_get(swigCPtr, this);
  }

  /**
   * Audio capture buffer length, in milliseconds.<br>
   * <br>
   * Default: PJMEDIA_SND_DEFAULT_REC_LATENCY
   */
  public void setSndRecLatency(long value) {
    pjsua2JNI.MediaConfig_sndRecLatency_set(swigCPtr, this, value);
  }

  /**
   * Audio capture buffer length, in milliseconds.<br>
   * <br>
   * Default: PJMEDIA_SND_DEFAULT_REC_LATENCY
   */
  public long getSndRecLatency() {
    return pjsua2JNI.MediaConfig_sndRecLatency_get(swigCPtr, this);
  }

  /**
   * Audio playback buffer length, in milliseconds.<br>
   * <br>
   * Default: PJMEDIA_SND_DEFAULT_PLAY_LATENCY
   */
  public void setSndPlayLatency(long value) {
    pjsua2JNI.MediaConfig_sndPlayLatency_set(swigCPtr, this, value);
  }

  /**
   * Audio playback buffer length, in milliseconds.<br>
   * <br>
   * Default: PJMEDIA_SND_DEFAULT_PLAY_LATENCY
   */
  public long getSndPlayLatency() {
    return pjsua2JNI.MediaConfig_sndPlayLatency_get(swigCPtr, this);
  }

  /**
   * Jitter buffer initial prefetch delay in msec. The value must be<br>
   * between jb_min_pre and jb_max_pre below. If the value is 0,<br>
   * prefetching will be disabled.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently 0)
   */
  public void setJbInit(int value) {
    pjsua2JNI.MediaConfig_jbInit_set(swigCPtr, this, value);
  }

  /**
   * Jitter buffer initial prefetch delay in msec. The value must be<br>
   * between jb_min_pre and jb_max_pre below. If the value is 0,<br>
   * prefetching will be disabled.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently 0)
   */
  public int getJbInit() {
    return pjsua2JNI.MediaConfig_jbInit_get(swigCPtr, this);
  }

  /**
   * Jitter buffer minimum prefetch delay in msec.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently codec ptime)
   */
  public void setJbMinPre(int value) {
    pjsua2JNI.MediaConfig_jbMinPre_set(swigCPtr, this, value);
  }

  /**
   * Jitter buffer minimum prefetch delay in msec.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently codec ptime)
   */
  public int getJbMinPre() {
    return pjsua2JNI.MediaConfig_jbMinPre_get(swigCPtr, this);
  }

  /**
   * Jitter buffer maximum prefetch delay in msec.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently 80% of jbMax)
   */
  public void setJbMaxPre(int value) {
    pjsua2JNI.MediaConfig_jbMaxPre_set(swigCPtr, this, value);
  }

  /**
   * Jitter buffer maximum prefetch delay in msec.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently 80% of jbMax)
   */
  public int getJbMaxPre() {
    return pjsua2JNI.MediaConfig_jbMaxPre_get(swigCPtr, this);
  }

  /**
   * Set maximum delay that can be accomodated by the jitter buffer msec.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently 500 msec)
   */
  public void setJbMax(int value) {
    pjsua2JNI.MediaConfig_jbMax_set(swigCPtr, this, value);
  }

  /**
   * Set maximum delay that can be accomodated by the jitter buffer msec.<br>
   * <br>
   * Default: -1 (to use default stream settings, currently 500 msec)
   */
  public int getJbMax() {
    return pjsua2JNI.MediaConfig_jbMax_get(swigCPtr, this);
  }

  /**
   * Set the algorithm the jitter buffer uses to discard frames in order to<br>
   * adjust the latency.<br>
   * <br>
   * Default: PJMEDIA_JB_DISCARD_PROGRESSIVE
   */
  public void setJbDiscardAlgo(SWIGTYPE_p_pjmedia_jb_discard_algo value) {
    pjsua2JNI.MediaConfig_jbDiscardAlgo_set(swigCPtr, this, SWIGTYPE_p_pjmedia_jb_discard_algo.getCPtr(value));
  }

  /**
   * Set the algorithm the jitter buffer uses to discard frames in order to<br>
   * adjust the latency.<br>
   * <br>
   * Default: PJMEDIA_JB_DISCARD_PROGRESSIVE
   */
  public SWIGTYPE_p_pjmedia_jb_discard_algo getJbDiscardAlgo() {
    return new SWIGTYPE_p_pjmedia_jb_discard_algo(pjsua2JNI.MediaConfig_jbDiscardAlgo_get(swigCPtr, this), true);
  }

  /**
   * Specify idle time of sound device before it is automatically closed,<br>
   * in seconds. Use value -1 to disable the auto-close feature of sound<br>
   * device<br>
   * <br>
   * Default : 1
   */
  public void setSndAutoCloseTime(int value) {
    pjsua2JNI.MediaConfig_sndAutoCloseTime_set(swigCPtr, this, value);
  }

  /**
   * Specify idle time of sound device before it is automatically closed,<br>
   * in seconds. Use value -1 to disable the auto-close feature of sound<br>
   * device<br>
   * <br>
   * Default : 1
   */
  public int getSndAutoCloseTime() {
    return pjsua2JNI.MediaConfig_sndAutoCloseTime_get(swigCPtr, this);
  }

  /**
   * Specify whether built-in/native preview should be used if available.<br>
   * In some systems, video input devices have built-in capability to show<br>
   * preview window of the device. Using this built-in preview is preferable<br>
   * as it consumes less CPU power. If built-in preview is not available,<br>
   * the library will perform software rendering of the input. If this<br>
   * field is set to PJ_FALSE, software preview will always be used.<br>
   * <br>
   * Default: PJ_TRUE
   */
  public void setVidPreviewEnableNative(boolean value) {
    pjsua2JNI.MediaConfig_vidPreviewEnableNative_set(swigCPtr, this, value);
  }

  /**
   * Specify whether built-in/native preview should be used if available.<br>
   * In some systems, video input devices have built-in capability to show<br>
   * preview window of the device. Using this built-in preview is preferable<br>
   * as it consumes less CPU power. If built-in preview is not available,<br>
   * the library will perform software rendering of the input. If this<br>
   * field is set to PJ_FALSE, software preview will always be used.<br>
   * <br>
   * Default: PJ_TRUE
   */
  public boolean getVidPreviewEnableNative() {
    return pjsua2JNI.MediaConfig_vidPreviewEnableNative_get(swigCPtr, this);
  }

  /**
   *  Default constructor initialises with default values 
   */
  public MediaConfig() {
    this(pjsua2JNI.new_MediaConfig(), true);
  }

  /**
   * Read this object from a container.<br>
   * <br>
   * @param node              Container to write values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.MediaConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.MediaConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

}
