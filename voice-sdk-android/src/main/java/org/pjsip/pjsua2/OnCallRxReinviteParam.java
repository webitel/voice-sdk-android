/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure contains parameters for Call::onCallRxReinvite() callback.
 */
public class OnCallRxReinviteParam {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OnCallRxReinviteParam(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OnCallRxReinviteParam obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_OnCallRxReinviteParam(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * The new offer received.
   */
  public void setOffer(SdpSession value) {
    pjsua2JNI.OnCallRxReinviteParam_offer_set(swigCPtr, this, SdpSession.getCPtr(value), value);
  }

  /**
   * The new offer received.
   */
  public SdpSession getOffer() {
    long cPtr = pjsua2JNI.OnCallRxReinviteParam_offer_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SdpSession(cPtr, false);
  }

  /**
   * The incoming re-INVITE.
   */
  public void setRdata(SipRxData value) {
    pjsua2JNI.OnCallRxReinviteParam_rdata_set(swigCPtr, this, SipRxData.getCPtr(value), value);
  }

  /**
   * The incoming re-INVITE.
   */
  public SipRxData getRdata() {
    long cPtr = pjsua2JNI.OnCallRxReinviteParam_rdata_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SipRxData(cPtr, false);
  }

  /**
   * On input, it is false. Set to true if app wants to manually answer<br>
   * the re-INVITE.
   */
  public void setIsAsync(boolean value) {
    pjsua2JNI.OnCallRxReinviteParam_isAsync_set(swigCPtr, this, value);
  }

  /**
   * On input, it is false. Set to true if app wants to manually answer<br>
   * the re-INVITE.
   */
  public boolean getIsAsync() {
    return pjsua2JNI.OnCallRxReinviteParam_isAsync_get(swigCPtr, this);
  }

  /**
   * Status code to be returned for answering the offer. On input,<br>
   * it contains status code PJSIP_SC_OK (200). Currently, valid values are only<br>
   * PJSIP_SC_OK (200) and PJSIP_SC_NOT_ACCEPTABLE_HERE (488).
   */
  public void setStatusCode(int value) {
    pjsua2JNI.OnCallRxReinviteParam_statusCode_set(swigCPtr, this, value);
  }

  /**
   * Status code to be returned for answering the offer. On input,<br>
   * it contains status code PJSIP_SC_OK (200). Currently, valid values are only<br>
   * PJSIP_SC_OK (200) and PJSIP_SC_NOT_ACCEPTABLE_HERE (488).
   */
  public int getStatusCode() {
    return pjsua2JNI.OnCallRxReinviteParam_statusCode_get(swigCPtr, this);
  }

  /**
   * The current call setting, application can update this setting for<br>
   * answering the offer.
   */
  public void setOpt(CallSetting value) {
    pjsua2JNI.OnCallRxReinviteParam_opt_set(swigCPtr, this, CallSetting.getCPtr(value), value);
  }

  /**
   * The current call setting, application can update this setting for<br>
   * answering the offer.
   */
  public CallSetting getOpt() {
    long cPtr = pjsua2JNI.OnCallRxReinviteParam_opt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new CallSetting(cPtr, false);
  }

  public OnCallRxReinviteParam() {
    this(pjsua2JNI.new_OnCallRxReinviteParam(), true);
  }

}
