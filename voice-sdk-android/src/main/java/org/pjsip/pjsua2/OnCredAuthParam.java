/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Parameter of Endpoint::onCredAuth() callback.
 */
public class OnCredAuthParam {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OnCredAuthParam(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OnCredAuthParam obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_OnCredAuthParam(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Digest challenge.<br>
   * The authentication challenge sent by server in 401 or 401 response,<br>
   * as either Proxy-Authenticate or WWW-Authenticate header.
   */
  public void setDigestChallenge(DigestChallenge value) {
    pjsua2JNI.OnCredAuthParam_digestChallenge_set(swigCPtr, this, DigestChallenge.getCPtr(value), value);
  }

  /**
   * Digest challenge.<br>
   * The authentication challenge sent by server in 401 or 401 response,<br>
   * as either Proxy-Authenticate or WWW-Authenticate header.
   */
  public DigestChallenge getDigestChallenge() {
    long cPtr = pjsua2JNI.OnCredAuthParam_digestChallenge_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DigestChallenge(cPtr, false);
  }

  /**
   * Credential info.
   */
  public void setCredentialInfo(AuthCredInfo value) {
    pjsua2JNI.OnCredAuthParam_credentialInfo_set(swigCPtr, this, AuthCredInfo.getCPtr(value), value);
  }

  /**
   * Credential info.
   */
  public AuthCredInfo getCredentialInfo() {
    long cPtr = pjsua2JNI.OnCredAuthParam_credentialInfo_get(swigCPtr, this);
    return (cPtr == 0) ? null : new AuthCredInfo(cPtr, false);
  }

  /**
   * The request method.
   */
  public void setMethod(String value) {
    pjsua2JNI.OnCredAuthParam_method_set(swigCPtr, this, value);
  }

  /**
   * The request method.
   */
  public String getMethod() {
    return pjsua2JNI.OnCredAuthParam_method_get(swigCPtr, this);
  }

  /**
   * The digest credential where the digest response will be placed to.<br>
   * <br>
   * Upon calling this function, the nonce, nc, cnonce, qop, uri, and realm<br>
   * fields of this structure must be set by the caller.<br>
   * <br>
   * Upon return, the callback must set the response in<br>
   * <i>DigestCredential.response</i>.
   */
  public void setDigestCredential(DigestCredential value) {
    pjsua2JNI.OnCredAuthParam_digestCredential_set(swigCPtr, this, DigestCredential.getCPtr(value), value);
  }

  /**
   * The digest credential where the digest response will be placed to.<br>
   * <br>
   * Upon calling this function, the nonce, nc, cnonce, qop, uri, and realm<br>
   * fields of this structure must be set by the caller.<br>
   * <br>
   * Upon return, the callback must set the response in<br>
   * <i>DigestCredential.response</i>.
   */
  public DigestCredential getDigestCredential() {
    long cPtr = pjsua2JNI.OnCredAuthParam_digestCredential_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DigestCredential(cPtr, false);
  }

  public OnCredAuthParam() {
    this(pjsua2JNI.new_OnCredAuthParam(), true);
  }

}
