/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure contains parameters for Call::onDtmfEvent()<br>
 * callback.
 */
public class OnDtmfEventParam {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OnDtmfEventParam(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OnDtmfEventParam obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_OnDtmfEventParam(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * DTMF sending method.
   */
  public void setMethod(int value) {
    pjsua2JNI.OnDtmfEventParam_method_set(swigCPtr, this, value);
  }

  /**
   * DTMF sending method.
   */
  public int getMethod() {
    return pjsua2JNI.OnDtmfEventParam_method_get(swigCPtr, this);
  }

  /**
   * The timestamp identifying the begin of the event. Timestamp units are<br>
   * expressed in milliseconds.<br>
   * Note that this value should only be used to compare multiple events<br>
   * received via the same method relatively to each other, as the time-base<br>
   * is randomized.
   */
  public void setTimestamp(long value) {
    pjsua2JNI.OnDtmfEventParam_timestamp_set(swigCPtr, this, value);
  }

  /**
   * The timestamp identifying the begin of the event. Timestamp units are<br>
   * expressed in milliseconds.<br>
   * Note that this value should only be used to compare multiple events<br>
   * received via the same method relatively to each other, as the time-base<br>
   * is randomized.
   */
  public long getTimestamp() {
    return pjsua2JNI.OnDtmfEventParam_timestamp_get(swigCPtr, this);
  }

  /**
   * DTMF ASCII digit.
   */
  public void setDigit(String value) {
    pjsua2JNI.OnDtmfEventParam_digit_set(swigCPtr, this, value);
  }

  /**
   * DTMF ASCII digit.
   */
  public String getDigit() {
    return pjsua2JNI.OnDtmfEventParam_digit_get(swigCPtr, this);
  }

  /**
   * DTMF signal duration in milliseconds. Interpretation of the duration<br>
   * depends on the flag PJMEDIA_STREAM_DTMF_IS_END.<br>
   * depends on the method.<br>
   * If the method is PJSUA_DTMF_METHOD_SIP_INFO, this contains the total<br>
   * duration of the DTMF signal or PJSUA_UNKNOWN_DTMF_DURATION if no signal<br>
   * duration was indicated.<br>
   * If the method is PJSUA_DTMF_METHOD_RFC2833, this contains the total<br>
   * duration of the DTMF signal received up to this point in time.
   */
  public void setDuration(long value) {
    pjsua2JNI.OnDtmfEventParam_duration_set(swigCPtr, this, value);
  }

  /**
   * DTMF signal duration in milliseconds. Interpretation of the duration<br>
   * depends on the flag PJMEDIA_STREAM_DTMF_IS_END.<br>
   * depends on the method.<br>
   * If the method is PJSUA_DTMF_METHOD_SIP_INFO, this contains the total<br>
   * duration of the DTMF signal or PJSUA_UNKNOWN_DTMF_DURATION if no signal<br>
   * duration was indicated.<br>
   * If the method is PJSUA_DTMF_METHOD_RFC2833, this contains the total<br>
   * duration of the DTMF signal received up to this point in time.
   */
  public long getDuration() {
    return pjsua2JNI.OnDtmfEventParam_duration_get(swigCPtr, this);
  }

  /**
   * Flags indicating additional information about the DTMF event.<br>
   * If PJMEDIA_STREAM_DTMF_IS_UPDATE is set, the event was already<br>
   * indicated earlier. The new indication contains an updated event<br>
   * duration.<br>
   * If PJMEDIA_STREAM_DTMF_IS_END is set, the event has ended and this<br>
   * indication contains the final event duration. Note that end<br>
   * indications might get lost. Hence it is not guaranteed to receive<br>
   * an event with PJMEDIA_STREAM_DTMF_IS_END for every event.
   */
  public void setFlags(long value) {
    pjsua2JNI.OnDtmfEventParam_flags_set(swigCPtr, this, value);
  }

  /**
   * Flags indicating additional information about the DTMF event.<br>
   * If PJMEDIA_STREAM_DTMF_IS_UPDATE is set, the event was already<br>
   * indicated earlier. The new indication contains an updated event<br>
   * duration.<br>
   * If PJMEDIA_STREAM_DTMF_IS_END is set, the event has ended and this<br>
   * indication contains the final event duration. Note that end<br>
   * indications might get lost. Hence it is not guaranteed to receive<br>
   * an event with PJMEDIA_STREAM_DTMF_IS_END for every event.
   */
  public long getFlags() {
    return pjsua2JNI.OnDtmfEventParam_flags_get(swigCPtr, this);
  }

  public OnDtmfEventParam() {
    this(pjsua2JNI.new_OnDtmfEventParam(), true);
  }

}
