/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure contains parameters for Call::onStreamCreated()<br>
 * callback.
 */
public class OnStreamCreatedParam {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OnStreamCreatedParam(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OnStreamCreatedParam obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_OnStreamCreatedParam(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Audio media stream, read-only.
   */
  public void setStream(SWIGTYPE_p_void value) {
    pjsua2JNI.OnStreamCreatedParam_stream_set(swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
  }

  /**
   * Audio media stream, read-only.
   */
  public SWIGTYPE_p_void getStream() {
    long cPtr = pjsua2JNI.OnStreamCreatedParam_stream_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  /**
   * Stream index in the audio media session, read-only.
   */
  public void setStreamIdx(long value) {
    pjsua2JNI.OnStreamCreatedParam_streamIdx_set(swigCPtr, this, value);
  }

  /**
   * Stream index in the audio media session, read-only.
   */
  public long getStreamIdx() {
    return pjsua2JNI.OnStreamCreatedParam_streamIdx_get(swigCPtr, this);
  }

  /**
   * Specify if PJSUA2 should take ownership of the port returned in<br>
   * the pPort parameter below. If set to true,<br>
   * pjmedia_port_destroy() will be called on the port when it is<br>
   * no longer needed.<br>
   * <br>
   * Default: false
   */
  public void setDestroyPort(boolean value) {
    pjsua2JNI.OnStreamCreatedParam_destroyPort_set(swigCPtr, this, value);
  }

  /**
   * Specify if PJSUA2 should take ownership of the port returned in<br>
   * the pPort parameter below. If set to true,<br>
   * pjmedia_port_destroy() will be called on the port when it is<br>
   * no longer needed.<br>
   * <br>
   * Default: false
   */
  public boolean getDestroyPort() {
    return pjsua2JNI.OnStreamCreatedParam_destroyPort_get(swigCPtr, this);
  }

  /**
   * On input, it specifies the audio media port of the stream. Application<br>
   * may modify this pointer to point to different media port to be<br>
   * registered to the conference bridge.
   */
  public void setPPort(SWIGTYPE_p_void value) {
    pjsua2JNI.OnStreamCreatedParam_pPort_set(swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
  }

  /**
   * On input, it specifies the audio media port of the stream. Application<br>
   * may modify this pointer to point to different media port to be<br>
   * registered to the conference bridge.
   */
  public SWIGTYPE_p_void getPPort() {
    long cPtr = pjsua2JNI.OnStreamCreatedParam_pPort_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public OnStreamCreatedParam() {
    this(pjsua2JNI.new_OnStreamCreatedParam(), true);
  }

}
