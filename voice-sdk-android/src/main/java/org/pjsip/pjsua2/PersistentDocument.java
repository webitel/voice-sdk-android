/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This a the abstract base class for a persistent document. A document<br>
 * is created either by loading from a string or a file, or by constructing<br>
 * it manually when writing data to it. The document then can be saved<br>
 * to either string or to a file. A document contains one root ContainerNode<br>
 * where all data are stored under.<br>
 * <br>
 * Document is read and written serially, hence the order of reading must be<br>
 * the same as the order of writing. The PersistentDocument class provides<br>
 * API to read and write to the root node, but for more flexible operations<br>
 * application can use the ContainerNode methods instead. Indeed the read<br>
 * and write API in PersistentDocument is just a shorthand which calls the<br>
 * relevant methods in the ContainerNode. As a tip, normally application only<br>
 * uses the readObject() and writeObject() methods declared here to read/write<br>
 * top level objects, and use the macros that are explained in ContainerNode<br>
 * documentation to read/write more detailed data.
 */
public class PersistentDocument {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PersistentDocument(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PersistentDocument obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_PersistentDocument(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Load this document from a file.<br>
   * <br>
   * @param filename  The file name.
   */
  public void loadFile(String filename) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_loadFile(swigCPtr, this, filename);
  }

  /**
   * Load this document from string.<br>
   * <br>
   * @param input     The string.
   */
  public void loadString(String input) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_loadString(swigCPtr, this, input);
  }

  /**
   * Write this document to a file.<br>
   * <br>
   * @param filename  The file name.
   */
  public void saveFile(String filename) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_saveFile(swigCPtr, this, filename);
  }

  /**
   * Write this document to string.<br>
   * <br>
   * @return The string document.
   */
  public String saveString() throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_saveString(swigCPtr, this);
  }

  /**
   * Get the root container node for this document<br>
   * <br>
   * @return The root node.
   */
  public ContainerNode getRootContainer() {
    return new ContainerNode(pjsua2JNI.PersistentDocument_getRootContainer(swigCPtr, this), false);
  }

  /**
   * Determine if there is unread element. If yes, then app can use one of<br>
   * the readXxx() functions to read it.<br>
   * <br>
   * @return True if there is.
   */
  public boolean hasUnread() {
    return pjsua2JNI.PersistentDocument_hasUnread(swigCPtr, this);
  }

  /**
   * Get the name of the next unread element. It will throw Error if there<br>
   * is no more element to read.<br>
   * <br>
   * @return The name of the next element .
   */
  public String unreadName() throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_unreadName(swigCPtr, this);
  }

  /**
   * Read an integer value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public int readInt(String name) throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readInt__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read an integer value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public int readInt() throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readInt__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a float value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public float readNumber(String name) throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readNumber__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read a float value from the document and return the value.<br>
   * This will throw Error if the current element is not a number.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public float readNumber() throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readNumber__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a boolean value from the container and return the value.<br>
   * This will throw Error if the current element is not a boolean.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public boolean readBool(String name) throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readBool__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read a boolean value from the container and return the value.<br>
   * This will throw Error if the current element is not a boolean.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public boolean readBool() throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readBool__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a string value from the container and return the value.<br>
   * This will throw Error if the current element is not a string.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public String readString(String name) throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readString__SWIG_0(swigCPtr, this, name);
  }

  /**
   * Read a string value from the container and return the value.<br>
   * This will throw Error if the current element is not a string.<br>
   * The read position will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public String readString() throws java.lang.Exception {
    return pjsua2JNI.PersistentDocument_readString__SWIG_1(swigCPtr, this);
  }

  /**
   * Read a string array from the container. This will throw Error<br>
   * if the current element is not a string array. The read position<br>
   * will be advanced to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return The value.
   */
  public StringVector readStringVector(String name) throws java.lang.Exception {
    return new StringVector(pjsua2JNI.PersistentDocument_readStringVector__SWIG_0(swigCPtr, this, name), true);
  }

  /**
   * Read a string array from the container. This will throw Error<br>
   * if the current element is not a string array. The read position<br>
   * will be advanced to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return The value.
   */
  public StringVector readStringVector() throws java.lang.Exception {
    return new StringVector(pjsua2JNI.PersistentDocument_readStringVector__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Read the specified object from the container. This is equal to<br>
   * calling PersistentObject.readObject(ContainerNode);<br>
   * <br>
   * @param obj       The object to read.
   */
  public void readObject(PersistentObject obj) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_readObject(swigCPtr, this, PersistentObject.getCPtr(obj), obj);
  }

  /**
   * Read a container from the container. This will throw Error if the<br>
   * current element is not an object. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readContainer(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.PersistentDocument_readContainer__SWIG_0(swigCPtr, this, name), true);
  }

  /**
   * Read a container from the container. This will throw Error if the<br>
   * current element is not an object. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readContainer() throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.PersistentDocument_readContainer__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Read array container from the container. This will throw Error if the<br>
   * current element is not an array. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * @param name      If specified, then the function will check if the<br>
   *                  name of the next element matches the specified<br>
   *                  name and throw Error if it doesn't match.<br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readArray(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.PersistentDocument_readArray__SWIG_0(swigCPtr, this, name), true);
  }

  /**
   * Read array container from the container. This will throw Error if the<br>
   * current element is not an array. The read position will be advanced<br>
   * to the next element.<br>
   * <br>
   * <br>
   * <br>
   * @return Container object.
   */
  public ContainerNode readArray() throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.PersistentDocument_readArray__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Write a number value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param num       The value to be written.
   */
  public void writeNumber(String name, float num) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_writeNumber(swigCPtr, this, name, num);
  }

  /**
   * Write a number value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param num       The value to be written.
   */
  public void writeInt(String name, int num) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_writeInt(swigCPtr, this, name, num);
  }

  /**
   * Write a boolean value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param value     The value to be written.
   */
  public void writeBool(String name, boolean value) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_writeBool(swigCPtr, this, name, value);
  }

  /**
   * Write a string value to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param value     The value to be written.
   */
  public void writeString(String name, String value) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_writeString(swigCPtr, this, name, value);
  }

  /**
   * Write string vector to the container.<br>
   * <br>
   * @param name      The name for the value in the container.<br>
   * @param arr       The vector to be written.
   */
  public void writeStringVector(String name, StringVector arr) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_writeStringVector(swigCPtr, this, name, StringVector.getCPtr(arr), arr);
  }

  /**
   * Write an object to the container. This is equal to calling<br>
   * PersistentObject.writeObject(ContainerNode);<br>
   * <br>
   * @param obj       The object to be written
   */
  public void writeObject(PersistentObject obj) throws java.lang.Exception {
    pjsua2JNI.PersistentDocument_writeObject(swigCPtr, this, PersistentObject.getCPtr(obj), obj);
  }

  /**
   * Create and write an empty Object node that can be used as parent<br>
   * for subsequent write operations.<br>
   * <br>
   * @param name      The name for the new container in the container.<br>
   * <br>
   * @return A sub-container.
   */
  public ContainerNode writeNewContainer(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.PersistentDocument_writeNewContainer(swigCPtr, this, name), true);
  }

  /**
   * Create and write an empty array node that can be used as parent<br>
   * for subsequent write operations.<br>
   * <br>
   * @param name      The name for the array.<br>
   * <br>
   * @return A sub-container.
   */
  public ContainerNode writeNewArray(String name) throws java.lang.Exception {
    return new ContainerNode(pjsua2JNI.PersistentDocument_writeNewArray(swigCPtr, this, name), true);
  }

}
