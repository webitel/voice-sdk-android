/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Additional options when sending outgoing SIP message. This corresponds to<br>
 * pjsua_msg_data structure in PJSIP library.
 */
public class SipTxOption {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SipTxOption(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SipTxOption obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_SipTxOption(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Optional remote target URI (i.e. Target header). If empty (""), the<br>
   * target will be set to the remote URI (To header). At the moment this<br>
   * field is only used when sending initial INVITE and MESSAGE requests.
   */
  public void setTargetUri(String value) {
    pjsua2JNI.SipTxOption_targetUri_set(swigCPtr, this, value);
  }

  /**
   * Optional remote target URI (i.e. Target header). If empty (""), the<br>
   * target will be set to the remote URI (To header). At the moment this<br>
   * field is only used when sending initial INVITE and MESSAGE requests.
   */
  public String getTargetUri() {
    return pjsua2JNI.SipTxOption_targetUri_get(swigCPtr, this);
  }

  /**
   * Optional local URI (i.e. From header). If empty (""), the<br>
   * <i>AccountConfig::idUri</i> is used for the From header. At the moment this<br>
   * field is only used when sending initial INVITE and MESSAGE requests.
   */
  public void setLocalUri(String value) {
    pjsua2JNI.SipTxOption_localUri_set(swigCPtr, this, value);
  }

  /**
   * Optional local URI (i.e. From header). If empty (""), the<br>
   * <i>AccountConfig::idUri</i> is used for the From header. At the moment this<br>
   * field is only used when sending initial INVITE and MESSAGE requests.
   */
  public String getLocalUri() {
    return pjsua2JNI.SipTxOption_localUri_get(swigCPtr, this);
  }

  /**
   * Additional message headers to be included in the outgoing message.
   */
  public void setHeaders(SipHeaderVector value) {
    pjsua2JNI.SipTxOption_headers_set(swigCPtr, this, SipHeaderVector.getCPtr(value), value);
  }

  /**
   * Additional message headers to be included in the outgoing message.
   */
  public SipHeaderVector getHeaders() {
    long cPtr = pjsua2JNI.SipTxOption_headers_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SipHeaderVector(cPtr, false);
  }

  /**
   * MIME type of the message body, if application specifies the messageBody<br>
   * in this structure.
   */
  public void setContentType(String value) {
    pjsua2JNI.SipTxOption_contentType_set(swigCPtr, this, value);
  }

  /**
   * MIME type of the message body, if application specifies the messageBody<br>
   * in this structure.
   */
  public String getContentType() {
    return pjsua2JNI.SipTxOption_contentType_get(swigCPtr, this);
  }

  /**
   * Optional message body to be added to the message, only when the<br>
   * message doesn't have a body.
   */
  public void setMsgBody(String value) {
    pjsua2JNI.SipTxOption_msgBody_set(swigCPtr, this, value);
  }

  /**
   * Optional message body to be added to the message, only when the<br>
   * message doesn't have a body.
   */
  public String getMsgBody() {
    return pjsua2JNI.SipTxOption_msgBody_get(swigCPtr, this);
  }

  /**
   * Content type of the multipart body. If application wants to send<br>
   * multipart message bodies, it puts the parts in multipartParts and set<br>
   * the content type in multipartContentType. If the message already<br>
   * contains a body, the body will be added to the multipart bodies.
   */
  public void setMultipartContentType(SipMediaType value) {
    pjsua2JNI.SipTxOption_multipartContentType_set(swigCPtr, this, SipMediaType.getCPtr(value), value);
  }

  /**
   * Content type of the multipart body. If application wants to send<br>
   * multipart message bodies, it puts the parts in multipartParts and set<br>
   * the content type in multipartContentType. If the message already<br>
   * contains a body, the body will be added to the multipart bodies.
   */
  public SipMediaType getMultipartContentType() {
    long cPtr = pjsua2JNI.SipTxOption_multipartContentType_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SipMediaType(cPtr, false);
  }

  /**
   * Array of multipart parts. If application wants to send multipart<br>
   * message bodies, it puts the parts in <i>parts</i> and set the content<br>
   * type in <i>multipart_ctype</i>. If the message already contains a body,<br>
   * the body will be added to the multipart bodies.
   */
  public void setMultipartParts(SipMultipartPartVector value) {
    pjsua2JNI.SipTxOption_multipartParts_set(swigCPtr, this, SipMultipartPartVector.getCPtr(value), value);
  }

  /**
   * Array of multipart parts. If application wants to send multipart<br>
   * message bodies, it puts the parts in <i>parts</i> and set the content<br>
   * type in <i>multipart_ctype</i>. If the message already contains a body,<br>
   * the body will be added to the multipart bodies.
   */
  public SipMultipartPartVector getMultipartParts() {
    long cPtr = pjsua2JNI.SipTxOption_multipartParts_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SipMultipartPartVector(cPtr, false);
  }

  /**
   * Check if the options are empty. If the options are set with empty<br>
   * values, there will be no additional information sent with outgoing<br>
   * SIP message.<br>
   * <br>
   * @return True if the options are empty.
   */
  public boolean isEmpty() {
    return pjsua2JNI.SipTxOption_isEmpty(swigCPtr, this);
  }

  public SipTxOption() {
    this(pjsua2JNI.new_SipTxOption(), true);
  }

}
