/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Tone generator.
 */
public class ToneGenerator extends AudioMedia {
  private transient long swigCPtr;

  protected ToneGenerator(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.ToneGenerator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ToneGenerator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_ToneGenerator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Constructor.
   */
  public ToneGenerator() {
    this(pjsua2JNI.new_ToneGenerator(), true);
  }

  /**
   * Create tone generator and register the port to the conference bridge.
   */
  public void createToneGenerator(long clock_rate, long channel_count) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_createToneGenerator__SWIG_0(swigCPtr, this, clock_rate, channel_count);
  }

  /**
   * Create tone generator and register the port to the conference bridge.
   */
  public void createToneGenerator(long clock_rate) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_createToneGenerator__SWIG_1(swigCPtr, this, clock_rate);
  }

  /**
   * Create tone generator and register the port to the conference bridge.
   */
  public void createToneGenerator() throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_createToneGenerator__SWIG_2(swigCPtr, this);
  }

  /**
   * Check if the tone generator is still busy producing some tones.<br>
   * @return Non-zero if busy.
   */
  public boolean isBusy() {
    return pjsua2JNI.ToneGenerator_isBusy(swigCPtr, this);
  }

  /**
   * Instruct the tone generator to stop current processing.
   */
  public void stop() throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_stop(swigCPtr, this);
  }

  /**
   * Rewind the playback. This will start the playback to the first<br>
   * tone in the playback list.
   */
  public void rewind() throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_rewind(swigCPtr, this);
  }

  /**
   * Instruct the tone generator to play single or dual frequency tones<br>
   * with the specified duration. The new tones will be appended to<br>
   * currently playing tones, unless stop() is called before calling this<br>
   * function. The playback will begin as soon as the tone generator is<br>
   * connected to other media.<br>
   * <br>
   * @param tones         Array of tones to be played.<br>
   * @param loop          Play the tone in a loop.
   */
  public void play(ToneDescVector tones, boolean loop) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_play__SWIG_0(swigCPtr, this, ToneDescVector.getCPtr(tones), tones, loop);
  }

  /**
   * Instruct the tone generator to play single or dual frequency tones<br>
   * with the specified duration. The new tones will be appended to<br>
   * currently playing tones, unless stop() is called before calling this<br>
   * function. The playback will begin as soon as the tone generator is<br>
   * connected to other media.<br>
   * <br>
   * @param tones         Array of tones to be played.<br>
   * 
   */
  public void play(ToneDescVector tones) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_play__SWIG_1(swigCPtr, this, ToneDescVector.getCPtr(tones), tones);
  }

  /**
   * Instruct the tone generator to play multiple MF digits with each of<br>
   * the digits having individual ON/OFF duration. Each of the digit in the<br>
   * digit array must have the corresponding descriptor in the digit map.<br>
   * The new tones will be appended to currently playing tones, unless<br>
   * stop() is called before calling this function. The playback will begin<br>
   * as soon as the tone generator is connected to a sink media.<br>
   * <br>
   * @param digits        Array of MF digits.<br>
   * @param loop          Play the tone in a loop.
   */
  public void playDigits(ToneDigitVector digits, boolean loop) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_playDigits__SWIG_0(swigCPtr, this, ToneDigitVector.getCPtr(digits), digits, loop);
  }

  /**
   * Instruct the tone generator to play multiple MF digits with each of<br>
   * the digits having individual ON/OFF duration. Each of the digit in the<br>
   * digit array must have the corresponding descriptor in the digit map.<br>
   * The new tones will be appended to currently playing tones, unless<br>
   * stop() is called before calling this function. The playback will begin<br>
   * as soon as the tone generator is connected to a sink media.<br>
   * <br>
   * @param digits        Array of MF digits.<br>
   * 
   */
  public void playDigits(ToneDigitVector digits) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_playDigits__SWIG_1(swigCPtr, this, ToneDigitVector.getCPtr(digits), digits);
  }

  /**
   * Get the digit-map currently used by this tone generator.<br>
   * <br>
   * @return The digitmap currently used by the tone generator
   */
  public ToneDigitMapVector getDigitMap() throws java.lang.Exception {
    return new ToneDigitMapVector(pjsua2JNI.ToneGenerator_getDigitMap(swigCPtr, this), true);
  }

  /**
   * Set digit map to be used by the tone generator.<br>
   * <br>
   * @param digit_map     Digitmap to be used by the tone generator.
   */
  public void setDigitMap(ToneDigitMapVector digit_map) throws java.lang.Exception {
    pjsua2JNI.ToneGenerator_setDigitMap(swigCPtr, this, ToneDigitMapVector.getCPtr(digit_map), digit_map);
  }

}
