/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Parameters to create a transport instance.
 */
public class TransportConfig extends PersistentObject {
  private transient long swigCPtr;

  protected TransportConfig(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.TransportConfig_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TransportConfig obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_TransportConfig(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * UDP port number to bind locally. This setting MUST be specified<br>
   * even when default port is desired. If the value is zero, the<br>
   * transport will be bound to any available port, and application<br>
   * can query the port by querying the transport info.
   */
  public void setPort(long value) {
    pjsua2JNI.TransportConfig_port_set(swigCPtr, this, value);
  }

  /**
   * UDP port number to bind locally. This setting MUST be specified<br>
   * even when default port is desired. If the value is zero, the<br>
   * transport will be bound to any available port, and application<br>
   * can query the port by querying the transport info.
   */
  public long getPort() {
    return pjsua2JNI.TransportConfig_port_get(swigCPtr, this);
  }

  /**
   * Specify the port range for socket binding, relative to the start<br>
   * port number specified in <i>port</i>. Note that this setting is only<br>
   * applicable for media transport when the start port number is non zero.<br>
   * Media transport is configurable via account setting, <br>
   * i.e: AccountMediaConfig::transportConfig, please check the media<br>
   * transport config docs for more info.<br>
   * <br>
   * Available ports are in the range of [<i>port</i>, <i>port</i> + <i>portRange]</i>.<br>
   * <br>
   * Default value is zero.
   */
  public void setPortRange(long value) {
    pjsua2JNI.TransportConfig_portRange_set(swigCPtr, this, value);
  }

  /**
   * Specify the port range for socket binding, relative to the start<br>
   * port number specified in <i>port</i>. Note that this setting is only<br>
   * applicable for media transport when the start port number is non zero.<br>
   * Media transport is configurable via account setting, <br>
   * i.e: AccountMediaConfig::transportConfig, please check the media<br>
   * transport config docs for more info.<br>
   * <br>
   * Available ports are in the range of [<i>port</i>, <i>port</i> + <i>portRange]</i>.<br>
   * <br>
   * Default value is zero.
   */
  public long getPortRange() {
    return pjsua2JNI.TransportConfig_portRange_get(swigCPtr, this);
  }

  /**
   * Specify whether to randomly pick the starting port number from<br>
   * the range of [<i>port</i>, <i>port</i> + <i>port_range]</i>. This setting is<br>
   * used only if both port and port_range are non-zero, and only<br>
   * applicable for the port selection of UDP and loop media transport.<br>
   * <br>
   * Default is PJ_FALSE.
   */
  public void setRandomizePort(boolean value) {
    pjsua2JNI.TransportConfig_randomizePort_set(swigCPtr, this, value);
  }

  /**
   * Specify whether to randomly pick the starting port number from<br>
   * the range of [<i>port</i>, <i>port</i> + <i>port_range]</i>. This setting is<br>
   * used only if both port and port_range are non-zero, and only<br>
   * applicable for the port selection of UDP and loop media transport.<br>
   * <br>
   * Default is PJ_FALSE.
   */
  public boolean getRandomizePort() {
    return pjsua2JNI.TransportConfig_randomizePort_get(swigCPtr, this);
  }

  /**
   * Optional address to advertise as the address of this transport.<br>
   * Application can specify any address or hostname for this field,<br>
   * for example it can point to one of the interface address in the<br>
   * system, or it can point to the public address of a NAT router<br>
   * where port mappings have been configured for the application.<br>
   * <br>
   * Note: this option can be used for both UDP and TCP as well!
   */
  public void setPublicAddress(String value) {
    pjsua2JNI.TransportConfig_publicAddress_set(swigCPtr, this, value);
  }

  /**
   * Optional address to advertise as the address of this transport.<br>
   * Application can specify any address or hostname for this field,<br>
   * for example it can point to one of the interface address in the<br>
   * system, or it can point to the public address of a NAT router<br>
   * where port mappings have been configured for the application.<br>
   * <br>
   * Note: this option can be used for both UDP and TCP as well!
   */
  public String getPublicAddress() {
    return pjsua2JNI.TransportConfig_publicAddress_get(swigCPtr, this);
  }

  /**
   * Optional address where the socket should be bound to. This option<br>
   * SHOULD only be used to selectively bind the socket to particular<br>
   * interface (instead of 0.0.0.0), and SHOULD NOT be used to set the<br>
   * published address of a transport (the public_addr field should be<br>
   * used for that purpose).<br>
   * <br>
   * Note that unlike public_addr field, the address (or hostname) here<br>
   * MUST correspond to the actual interface address in the host, since<br>
   * this address will be specified as bind() argument.
   */
  public void setBoundAddress(String value) {
    pjsua2JNI.TransportConfig_boundAddress_set(swigCPtr, this, value);
  }

  /**
   * Optional address where the socket should be bound to. This option<br>
   * SHOULD only be used to selectively bind the socket to particular<br>
   * interface (instead of 0.0.0.0), and SHOULD NOT be used to set the<br>
   * published address of a transport (the public_addr field should be<br>
   * used for that purpose).<br>
   * <br>
   * Note that unlike public_addr field, the address (or hostname) here<br>
   * MUST correspond to the actual interface address in the host, since<br>
   * this address will be specified as bind() argument.
   */
  public String getBoundAddress() {
    return pjsua2JNI.TransportConfig_boundAddress_get(swigCPtr, this);
  }

  /**
   * This specifies TLS settings for TLS transport. <br>
   * It's only used when creating a SIP TLS transport.
   */
  public void setTlsConfig(TlsConfig value) {
    pjsua2JNI.TransportConfig_tlsConfig_set(swigCPtr, this, TlsConfig.getCPtr(value), value);
  }

  /**
   * This specifies TLS settings for TLS transport. <br>
   * It's only used when creating a SIP TLS transport.
   */
  public TlsConfig getTlsConfig() {
    long cPtr = pjsua2JNI.TransportConfig_tlsConfig_get(swigCPtr, this);
    return (cPtr == 0) ? null : new TlsConfig(cPtr, false);
  }

  /**
   * QoS traffic type to be set on this transport. When application wants<br>
   * to apply QoS tagging to the transport, it's preferable to set this<br>
   * field rather than <i>qosParam</i> fields since this is more portable.<br>
   * <br>
   * For TLS transport, this field will be ignored, the QoS traffic type<br>
   * can be set via tlsConfig.<br>
   * <br>
   * Default is QoS not set.
   */
  public void setQosType(int value) {
    pjsua2JNI.TransportConfig_qosType_set(swigCPtr, this, value);
  }

  /**
   * QoS traffic type to be set on this transport. When application wants<br>
   * to apply QoS tagging to the transport, it's preferable to set this<br>
   * field rather than <i>qosParam</i> fields since this is more portable.<br>
   * <br>
   * For TLS transport, this field will be ignored, the QoS traffic type<br>
   * can be set via tlsConfig.<br>
   * <br>
   * Default is QoS not set.
   */
  public int getQosType() {
    return pjsua2JNI.TransportConfig_qosType_get(swigCPtr, this);
  }

  /**
   * Set the low level QoS parameters to the transport. This is a lower<br>
   * level operation than setting the <i>qosType</i> field and may not be<br>
   * supported on all platforms.<br>
   * <br>
   * For TLS transport, this field will be ignored, the low level QoS<br>
   * parameters can be set via tlsConfig.<br>
   * <br>
   * Default is QoS not set.
   */
  public void setQosParams(pj_qos_params value) {
    pjsua2JNI.TransportConfig_qosParams_set(swigCPtr, this, pj_qos_params.getCPtr(value), value);
  }

  /**
   * Set the low level QoS parameters to the transport. This is a lower<br>
   * level operation than setting the <i>qosType</i> field and may not be<br>
   * supported on all platforms.<br>
   * <br>
   * For TLS transport, this field will be ignored, the low level QoS<br>
   * parameters can be set via tlsConfig.<br>
   * <br>
   * Default is QoS not set.
   */
  public pj_qos_params getQosParams() {
    long cPtr = pjsua2JNI.TransportConfig_qosParams_get(swigCPtr, this);
    return (cPtr == 0) ? null : new pj_qos_params(cPtr, false);
  }

  /**
   * Set the low level socket options to the transport.<br>
   * <br>
   * For TLS transport, this field will be ignored, the socket options<br>
   * can be set via tlsConfig.<br>
   * <br>
   * Default is no socket option set.
   */
  public void setSockOptParams(SockOptParams value) {
    pjsua2JNI.TransportConfig_sockOptParams_set(swigCPtr, this, SockOptParams.getCPtr(value), value);
  }

  /**
   * Set the low level socket options to the transport.<br>
   * <br>
   * For TLS transport, this field will be ignored, the socket options<br>
   * can be set via tlsConfig.<br>
   * <br>
   * Default is no socket option set.
   */
  public SockOptParams getSockOptParams() {
    long cPtr = pjsua2JNI.TransportConfig_sockOptParams_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SockOptParams(cPtr, false);
  }

  /**
   *  Default constructor initialises with default values 
   */
  public TransportConfig() {
    this(pjsua2JNI.new_TransportConfig(), true);
  }

  /**
   * Read this object from a container node.<br>
   * <br>
   * @param node              Container to read values from.
   */
  public void readObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.TransportConfig_readObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

  /**
   * Write this object to a container node.<br>
   * <br>
   * @param node              Container to write values to.
   */
  public void writeObject(ContainerNode node) throws java.lang.Exception {
    pjsua2JNI.TransportConfig_writeObject(swigCPtr, this, ContainerNode.getCPtr(node), node);
  }

}
