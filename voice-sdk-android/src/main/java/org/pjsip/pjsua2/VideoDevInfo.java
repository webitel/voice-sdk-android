/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Video device information structure.
 */
public class VideoDevInfo {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VideoDevInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VideoDevInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_VideoDevInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * The device ID
   */
  public void setId(int value) {
    pjsua2JNI.VideoDevInfo_id_set(swigCPtr, this, value);
  }

  /**
   * The device ID
   */
  public int getId() {
    return pjsua2JNI.VideoDevInfo_id_get(swigCPtr, this);
  }

  /**
   * The device name
   */
  public void setName(String value) {
    pjsua2JNI.VideoDevInfo_name_set(swigCPtr, this, value);
  }

  /**
   * The device name
   */
  public String getName() {
    return pjsua2JNI.VideoDevInfo_name_get(swigCPtr, this);
  }

  /**
   * The underlying driver name
   */
  public void setDriver(String value) {
    pjsua2JNI.VideoDevInfo_driver_set(swigCPtr, this, value);
  }

  /**
   * The underlying driver name
   */
  public String getDriver() {
    return pjsua2JNI.VideoDevInfo_driver_get(swigCPtr, this);
  }

  /**
   * The supported direction of the video device, i.e. whether it supports<br>
   * capture only, render only, or both.
   */
  public void setDir(int value) {
    pjsua2JNI.VideoDevInfo_dir_set(swigCPtr, this, value);
  }

  /**
   * The supported direction of the video device, i.e. whether it supports<br>
   * capture only, render only, or both.
   */
  public int getDir() {
    return pjsua2JNI.VideoDevInfo_dir_get(swigCPtr, this);
  }

  /**
   * Device capabilities, as bitmask combination of #pjmedia_vid_dev_cap 
   */
  public void setCaps(long value) {
    pjsua2JNI.VideoDevInfo_caps_set(swigCPtr, this, value);
  }

  /**
   * Device capabilities, as bitmask combination of #pjmedia_vid_dev_cap 
   */
  public long getCaps() {
    return pjsua2JNI.VideoDevInfo_caps_get(swigCPtr, this);
  }

  /**
   * Array of supported video formats. Some fields in each supported video<br>
   * format may be set to zero or of "unknown" value, to indicate that the<br>
   * value is unknown or should be ignored. When these value are not set<br>
   * to zero, it indicates that the exact format combination is being used.
   */
  public void setFmt(MediaFormatVideoVector value) {
    pjsua2JNI.VideoDevInfo_fmt_set(swigCPtr, this, MediaFormatVideoVector.getCPtr(value), value);
  }

  /**
   * Array of supported video formats. Some fields in each supported video<br>
   * format may be set to zero or of "unknown" value, to indicate that the<br>
   * value is unknown or should be ignored. When these value are not set<br>
   * to zero, it indicates that the exact format combination is being used.
   */
  public MediaFormatVideoVector getFmt() {
    long cPtr = pjsua2JNI.VideoDevInfo_fmt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new MediaFormatVideoVector(cPtr, false);
  }

  /**
   * Default constructor
   */
  public VideoDevInfo() {
    this(pjsua2JNI.new_VideoDevInfo(), true);
  }

}
