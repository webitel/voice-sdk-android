/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Video Media.
 */
public class VideoMedia extends Media {
  private transient long swigCPtr;

  protected VideoMedia(long cPtr, boolean cMemoryOwn) {
    super(pjsua2JNI.VideoMedia_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VideoMedia obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_VideoMedia(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   * Get information about the specified conference port.
   */
  public VidConfPortInfo getPortInfo() throws java.lang.Exception {
    return new VidConfPortInfo(pjsua2JNI.VideoMedia_getPortInfo(swigCPtr, this), true);
  }

  /**
   * Get port Id.
   */
  public int getPortId() {
    return pjsua2JNI.VideoMedia_getPortId(swigCPtr, this);
  }

  /**
   * Get information from specific port id.
   */
  public static VidConfPortInfo getPortInfoFromId(int port_id) throws java.lang.Exception {
    return new VidConfPortInfo(pjsua2JNI.VideoMedia_getPortInfoFromId(port_id), true);
  }

  /**
   * Establish unidirectional media flow to sink. This media port<br>
   * will act as a source, and it may transmit to multiple destinations/sink.<br>
   * And if multiple sources are transmitting to the same sink, the media<br>
   * will be mixed together. Source and sink may refer to the same Media,<br>
   * effectively looping the media.<br>
   * <br>
   * If bidirectional media flow is desired, application needs to call<br>
   * this method twice, with the second one called from the opposite source<br>
   * media.<br>
   * <br>
   * @param sink              The destination Media.<br>
   * @param param             The parameter.
   */
  public void startTransmit(VideoMedia sink, VideoMediaTransmitParam param) throws java.lang.Exception {
    pjsua2JNI.VideoMedia_startTransmit(swigCPtr, this, VideoMedia.getCPtr(sink), sink, VideoMediaTransmitParam.getCPtr(param), param);
  }

  /**
   *  Stop media flow to destination/sink port.<br>
   * <br>
   * @param sink              The destination media.
   */
  public void stopTransmit(VideoMedia sink) throws java.lang.Exception {
    pjsua2JNI.VideoMedia_stopTransmit(swigCPtr, this, VideoMedia.getCPtr(sink), sink);
  }

  /**
   * Update or refresh port states from video port info. Some port may<br>
   * change its port info in the middle of a session, for example when<br>
   * a video stream decoder learns that incoming video size or frame rate<br>
   * has changed, video conference needs to be informed to update its<br>
   * internal states.
   */
  public void update() throws java.lang.Exception {
    pjsua2JNI.VideoMedia_update(swigCPtr, this);
  }

  /**
   * Default Constructor.<br>
   * <br>
   * Normally application will not create VideoMedia object directly,<br>
   * but it instantiates a VideoMedia derived class. This is set as public<br>
   * because some STL vector implementations require it.
   */
  public VideoMedia() {
    this(pjsua2JNI.new_VideoMedia(), true);
  }

}
