/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * This structure contains parameters for VideoPreview::start()
 */
public class VideoPreviewOpParam {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VideoPreviewOpParam(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VideoPreviewOpParam obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_VideoPreviewOpParam(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Device ID for the video renderer to be used for rendering the<br>
   * capture stream for preview. This parameter is ignored if native<br>
   * preview is being used.<br>
   * <br>
   * Default: PJMEDIA_VID_DEFAULT_RENDER_DEV
   */
  public void setRendId(int value) {
    pjsua2JNI.VideoPreviewOpParam_rendId_set(swigCPtr, this, value);
  }

  /**
   * Device ID for the video renderer to be used for rendering the<br>
   * capture stream for preview. This parameter is ignored if native<br>
   * preview is being used.<br>
   * <br>
   * Default: PJMEDIA_VID_DEFAULT_RENDER_DEV
   */
  public int getRendId() {
    return pjsua2JNI.VideoPreviewOpParam_rendId_get(swigCPtr, this);
  }

  /**
   * Show window initially.<br>
   * <br>
   * Default: PJ_TRUE.
   */
  public void setShow(boolean value) {
    pjsua2JNI.VideoPreviewOpParam_show_set(swigCPtr, this, value);
  }

  /**
   * Show window initially.<br>
   * <br>
   * Default: PJ_TRUE.
   */
  public boolean getShow() {
    return pjsua2JNI.VideoPreviewOpParam_show_get(swigCPtr, this);
  }

  /**
   * Window flags.  The value is a bitmask combination of<br>
   * <i>pjmedia_vid_dev_wnd_flag</i>.<br>
   * <br>
   * Default: 0.
   */
  public void setWindowFlags(long value) {
    pjsua2JNI.VideoPreviewOpParam_windowFlags_set(swigCPtr, this, value);
  }

  /**
   * Window flags.  The value is a bitmask combination of<br>
   * <i>pjmedia_vid_dev_wnd_flag</i>.<br>
   * <br>
   * Default: 0.
   */
  public long getWindowFlags() {
    return pjsua2JNI.VideoPreviewOpParam_windowFlags_get(swigCPtr, this);
  }

  /**
   * Media format video. By default, this parameter is uninitialized<br>
   * and will not be used.<br>
   * <br>
   * To initialize it, use MediaFormatVideo::init().<br>
   * If left uninitialized, the capture device will be opened using<br>
   * PJMEDIA wrapper default format, e.g:<br>
   * - Android : PJMEDIA_FORMAT_I420 using the first supported size and 15fps<br>
   * - iOS : PJMEDIA_FORMAT_BGRA using size 352x288 and 15fps<br>
   * Note that when the preview is already opened, this setting will be<br>
   * ignored.
   */
  public void setFormat(MediaFormatVideo value) {
    pjsua2JNI.VideoPreviewOpParam_format_set(swigCPtr, this, MediaFormatVideo.getCPtr(value), value);
  }

  /**
   * Media format video. By default, this parameter is uninitialized<br>
   * and will not be used.<br>
   * <br>
   * To initialize it, use MediaFormatVideo::init().<br>
   * If left uninitialized, the capture device will be opened using<br>
   * PJMEDIA wrapper default format, e.g:<br>
   * - Android : PJMEDIA_FORMAT_I420 using the first supported size and 15fps<br>
   * - iOS : PJMEDIA_FORMAT_BGRA using size 352x288 and 15fps<br>
   * Note that when the preview is already opened, this setting will be<br>
   * ignored.
   */
  public MediaFormatVideo getFormat() {
    long cPtr = pjsua2JNI.VideoPreviewOpParam_format_get(swigCPtr, this);
    return (cPtr == 0) ? null : new MediaFormatVideo(cPtr, false);
  }

  /**
   * Optional output window to be used to display the video preview.<br>
   * This parameter will only be used if the video device supports<br>
   * PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW capability and the capability<br>
   * is not read-only.
   */
  public void setWindow(VideoWindowHandle value) {
    pjsua2JNI.VideoPreviewOpParam_window_set(swigCPtr, this, VideoWindowHandle.getCPtr(value), value);
  }

  /**
   * Optional output window to be used to display the video preview.<br>
   * This parameter will only be used if the video device supports<br>
   * PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW capability and the capability<br>
   * is not read-only.
   */
  public VideoWindowHandle getWindow() {
    long cPtr = pjsua2JNI.VideoPreviewOpParam_window_get(swigCPtr, this);
    return (cPtr == 0) ? null : new VideoWindowHandle(cPtr, false);
  }

  /**
   * Default constructor initializes with default values.
   */
  public VideoPreviewOpParam() {
    this(pjsua2JNI.new_VideoPreviewOpParam(), true);
  }

}
