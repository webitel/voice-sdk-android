/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.pjsip.pjsua2;

/**
 * Video window.
 */
public class VideoWindow {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VideoWindow(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VideoWindow obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pjsua2JNI.delete_VideoWindow(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   * Constructor
   */
  public VideoWindow(int win_id) {
    this(pjsua2JNI.new_VideoWindow(win_id), true);
  }

  /**
   * Get window info.<br>
   * <br>
   * @return video window info.
   */
  public VideoWindowInfo getInfo() throws java.lang.Exception {
    return new VideoWindowInfo(pjsua2JNI.VideoWindow_getInfo(swigCPtr, this), true);
  }

  /**
   * Get video media or conference bridge port of the renderer of<br>
   * this video window.<br>
   * <br>
   * @return Video media of this renderer window.
   */
  public VideoMedia getVideoMedia() throws java.lang.Exception {
    return new VideoMedia(pjsua2JNI.VideoWindow_getVideoMedia(swigCPtr, this), true);
  }

  /**
   * Show or hide window. This operation is not valid for native windows<br>
   * (VideoWindowInfo.isNative=true), on which native windowing API<br>
   * must be used instead.<br>
   * <br>
   * @param show              Set to true to show the window, false to<br>
   *                          hide the window.
   */
  public void Show(boolean show) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_Show(swigCPtr, this, show);
  }

  /**
   * Set video window position. This operation is not valid for native windows<br>
   * (VideoWindowInfo.isNative=true), on which native windowing API<br>
   * must be used instead.<br>
   * <br>
   * @param pos               The window position.
   */
  public void setPos(MediaCoordinate pos) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_setPos(swigCPtr, this, MediaCoordinate.getCPtr(pos), pos);
  }

  /**
   * Resize window. This operation is not valid for native windows<br>
   * (VideoWindowInfo.isNative=true), on which native windowing API<br>
   * must be used instead.<br>
   * <br>
   * @param size              The new window size.
   */
  public void setSize(MediaSize size) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_setSize(swigCPtr, this, MediaSize.getCPtr(size), size);
  }

  /**
   * Rotate the video window. This function will change the video orientation<br>
   * and also possibly the video window size (width and height get swapped).<br>
   * This operation is not valid for native windows (VideoWindowInfo.isNative<br>
   * =true), on which native windowing API must be used instead.<br>
   * <br>
   * @param angle             The rotation angle in degrees, must be<br>
   *                          multiple of 90.<br>
   *                          Specify positive value for clockwise rotation or<br>
   *                          negative value for counter-clockwise rotation.
   */
  public void rotate(int angle) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_rotate(swigCPtr, this, angle);
  }

  /**
   * Set output window. This operation is valid only when the underlying<br>
   * video device supports PJMEDIA_VIDEO_DEV_CAP_OUTPUT_WINDOW capability AND<br>
   * allows the output window to be changed on-the-fly, otherwise Error will<br>
   * be thrown. Currently it is only supported on Android.<br>
   * <br>
   * @param win               The new output window.
   */
  public void setWindow(VideoWindowHandle win) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_setWindow(swigCPtr, this, VideoWindowHandle.getCPtr(win), win);
  }

  /**
   * Set video window full-screen. This operation is valid only when the<br>
   * underlying video device supports PJMEDIA_VID_DEV_CAP_OUTPUT_FULLSCREEN<br>
   * capability. Currently it is only supported on SDL backend.<br>
   * <br>
   * @param enabled           Set to true if full screen is desired, false<br>
   *                          otherwise.
   */
  public void setFullScreen(boolean enabled) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_setFullScreen(swigCPtr, this, enabled);
  }

  /**
   * Set video window full-screen. This operation is valid only when the<br>
   * underlying video device supports PJMEDIA_VID_DEV_CAP_OUTPUT_FULLSCREEN<br>
   * capability. Currently it is only supported on SDL backend.<br>
   * <br>
   * @param mode              Fullscreen mode, see<br>
   *                          pjmedia_vid_dev_fullscreen_flag.
   */
  public void setFullScreen2(int mode) throws java.lang.Exception {
    pjsua2JNI.VideoWindow_setFullScreen2(swigCPtr, this, mode);
  }

}
